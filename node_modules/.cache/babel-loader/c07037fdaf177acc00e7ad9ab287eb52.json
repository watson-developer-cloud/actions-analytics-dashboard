{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { curveBasis, curveBasisClosed, curveBasisOpen, curveBundle, curveCardinal, curveCardinalClosed, curveCardinalOpen, curveCatmullRom, curveCatmullRomClosed, curveCatmullRomOpen, curveLinear, curveLinearClosed, curveMonotoneX, curveMonotoneY, curveNatural, curveStep, curveStepAfter, curveStepBefore } from 'd3-shape'; // Internal Imports\n\nimport { Service } from './service';\n\nvar Curves =\n/** @class */\nfunction (_super) {\n  __extends(Curves, _super);\n\n  function Curves() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.curveTypes = {\n      curveLinear: curveLinear,\n      curveLinearClosed: curveLinearClosed,\n      curveBasis: curveBasis,\n      curveBasisClosed: curveBasisClosed,\n      curveBasisOpen: curveBasisOpen,\n      curveBundle: curveBundle,\n      curveCardinal: curveCardinal,\n      curveCardinalClosed: curveCardinalClosed,\n      curveCardinalOpen: curveCardinalOpen,\n      curveCatmullRom: curveCatmullRom,\n      curveCatmullRomClosed: curveCatmullRomClosed,\n      curveCatmullRomOpen: curveCatmullRomOpen,\n      curveMonotoneX: curveMonotoneX,\n      curveMonotoneY: curveMonotoneY,\n      curveNatural: curveNatural,\n      curveStep: curveStep,\n      curveStepAfter: curveStepAfter,\n      curveStepBefore: curveStepBefore\n    };\n    return _this;\n  }\n\n  Curves.prototype.getD3Curve = function () {\n    var curveName = 'curveLinear';\n    var curveOptions = this.model.getOptions().curve; // Parse curve type whether the user provided a string\n    // Or an object with more options\n\n    if (curveOptions) {\n      if (typeof curveOptions === 'string') {\n        // curve: 'string'\n        curveName = curveOptions;\n      } else {\n        // curve: { name: 'string' }\n        curveName = curveOptions.name;\n      }\n    }\n\n    if (this.curveTypes[curveName]) {\n      // Grab correct d3 curve function\n      var curve_1 = this.curveTypes[curveName]; // Apply user-provided options to the d3 curve\n\n      if (curveOptions) {\n        Object.keys(curveOptions).forEach(function (optionName) {\n          if (curve_1[optionName]) {\n            curve_1 = curve_1[optionName](curveOptions[optionName]);\n          }\n        });\n      }\n\n      return curve_1;\n    }\n\n    console.warn(\"The curve type '\" + curveName + \"' is invalid, using 'curveLinear' instead\");\n    return this.curveTypes['curveLinear'];\n  };\n\n  return Curves;\n}(Service);\n\nexport { Curves };","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/@carbon/charts/services/curves.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","curveBasis","curveBasisClosed","curveBasisOpen","curveBundle","curveCardinal","curveCardinalClosed","curveCardinalOpen","curveCatmullRom","curveCatmullRomClosed","curveCatmullRomOpen","curveLinear","curveLinearClosed","curveMonotoneX","curveMonotoneY","curveNatural","curveStep","curveStepAfter","curveStepBefore","Service","Curves","_super","_this","apply","arguments","curveTypes","getD3Curve","curveName","curveOptions","model","getOptions","curve","name","curve_1","keys","forEach","optionName","console","warn"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { curveBasis, curveBasisClosed, curveBasisOpen, curveBundle, curveCardinal, curveCardinalClosed, curveCardinalOpen, curveCatmullRom, curveCatmullRomClosed, curveCatmullRomOpen, curveLinear, curveLinearClosed, curveMonotoneX, curveMonotoneY, curveNatural, curveStep, curveStepAfter, curveStepBefore, } from 'd3-shape';\n// Internal Imports\nimport { Service } from './service';\nvar Curves = /** @class */ (function (_super) {\n    __extends(Curves, _super);\n    function Curves() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.curveTypes = {\n            curveLinear: curveLinear,\n            curveLinearClosed: curveLinearClosed,\n            curveBasis: curveBasis,\n            curveBasisClosed: curveBasisClosed,\n            curveBasisOpen: curveBasisOpen,\n            curveBundle: curveBundle,\n            curveCardinal: curveCardinal,\n            curveCardinalClosed: curveCardinalClosed,\n            curveCardinalOpen: curveCardinalOpen,\n            curveCatmullRom: curveCatmullRom,\n            curveCatmullRomClosed: curveCatmullRomClosed,\n            curveCatmullRomOpen: curveCatmullRomOpen,\n            curveMonotoneX: curveMonotoneX,\n            curveMonotoneY: curveMonotoneY,\n            curveNatural: curveNatural,\n            curveStep: curveStep,\n            curveStepAfter: curveStepAfter,\n            curveStepBefore: curveStepBefore,\n        };\n        return _this;\n    }\n    Curves.prototype.getD3Curve = function () {\n        var curveName = 'curveLinear';\n        var curveOptions = this.model.getOptions().curve;\n        // Parse curve type whether the user provided a string\n        // Or an object with more options\n        if (curveOptions) {\n            if (typeof curveOptions === 'string') {\n                // curve: 'string'\n                curveName = curveOptions;\n            }\n            else {\n                // curve: { name: 'string' }\n                curveName = curveOptions.name;\n            }\n        }\n        if (this.curveTypes[curveName]) {\n            // Grab correct d3 curve function\n            var curve_1 = this.curveTypes[curveName];\n            // Apply user-provided options to the d3 curve\n            if (curveOptions) {\n                Object.keys(curveOptions).forEach(function (optionName) {\n                    if (curve_1[optionName]) {\n                        curve_1 = curve_1[optionName](curveOptions[optionName]);\n                    }\n                });\n            }\n            return curve_1;\n        }\n        console.warn(\"The curve type '\" + curveName + \"' is invalid, using 'curveLinear' instead\");\n        return this.curveTypes['curveLinear'];\n    };\n    return Curves;\n}(Service));\nexport { Curves };\n//# sourceMappingURL=../../src/services/curves.js.map"]},"metadata":{},"sourceType":"module"}