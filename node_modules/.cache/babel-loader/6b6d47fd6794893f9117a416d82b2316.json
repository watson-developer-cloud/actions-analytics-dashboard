{"ast":null,"code":"import { DOMUtils } from '../services';\nimport { Tools } from '../tools'; // D3 Imports\n\nimport { select } from 'd3-selection'; // import the settings for the css prefix\n\nimport settings from 'carbon-components/es/globals/js/settings';\n\nvar Component =\n/** @class */\nfunction () {\n  function Component(model, services, configs) {\n    this.configs = {};\n    this.model = model;\n    this.services = services;\n\n    if (configs) {\n      this.configs = configs;\n\n      if (this.configs.id) {\n        var chartprefix = Tools.getProperty(this.model.getOptions(), 'style', 'prefix');\n        this.id = chartprefix + \"--\" + this.configs.id;\n      }\n    } // Set parent element to shell SVG if no parent exists for component\n\n\n    if (!this.parent) {\n      this.setParent(select(this.services.domUtils.getMainSVG()));\n    }\n  }\n\n  Component.prototype.init = function () {};\n\n  Component.prototype.render = function (animate) {\n    if (animate === void 0) {\n      animate = true;\n    }\n\n    console.error('render() method is not implemented');\n  };\n\n  Component.prototype.destroy = function () {}; // Used to pass down information to the components\n\n\n  Component.prototype.setModel = function (newObj) {\n    this.model = newObj;\n  }; // Used to pass down information to the components\n\n\n  Component.prototype.setServices = function (newObj) {\n    this.services = newObj;\n  };\n\n  Component.prototype.setParent = function (parent) {\n    var oldParent = this.parent;\n    this.parent = parent;\n\n    if (oldParent && oldParent.node() === parent.node()) {\n      return;\n    }\n\n    if (this.type) {\n      var chartprefix = Tools.getProperty(this.model.getOptions(), 'style', 'prefix');\n      this.parent.classed(settings.prefix + \"--\" + chartprefix + \"--\" + this.type, true).attr('id', this.id);\n\n      if (oldParent) {\n        oldParent.classed(settings.prefix + \"--\" + chartprefix + \"--\" + this.type, false).attr('id', this.id);\n      }\n    }\n  };\n\n  Component.prototype.getParent = function () {\n    return this.parent;\n  };\n\n  Component.prototype.getContainerSVG = function (configs) {\n    if (configs === void 0) {\n      configs = {\n        withinChartClip: false\n      };\n    }\n\n    if (this.type) {\n      var chartprefix = Tools.getProperty(this.model.getOptions(), 'style', 'prefix');\n      var idSelector = this.id ? \"#\" + this.id : '';\n      var svg = DOMUtils.appendOrSelect(this.parent, \"g\" + idSelector + \".\" + settings.prefix + \"--\" + chartprefix + \"--\" + this.type);\n\n      if (configs.withinChartClip) {\n        // get unique chartClipId int this chart from model\n        var chartClipId = this.model.get('chartClipId');\n\n        if (chartClipId) {\n          svg.attr('clip-path', \"url(#\" + chartClipId + \")\");\n        }\n      }\n\n      return svg;\n    }\n\n    return this.parent;\n  };\n  /**\n   * graphs used in combo charts share a model with global options but can receive their own local options.\n   * this function retrieves the global options and merges it with any options passed into this\n   * component's config.options object.\n   */\n\n\n  Component.prototype.getOptions = function () {\n    if (this.configs.options) {\n      var options = Tools.merge({}, this.model.getOptions(), this.configs.options);\n      return options;\n    }\n\n    return this.model.getOptions();\n  };\n\n  return Component;\n}();\n\nexport { Component };","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/@carbon/charts/components/component.js"],"names":["DOMUtils","Tools","select","settings","Component","model","services","configs","id","chartprefix","getProperty","getOptions","parent","setParent","domUtils","getMainSVG","prototype","init","render","animate","console","error","destroy","setModel","newObj","setServices","oldParent","node","type","classed","prefix","attr","getParent","getContainerSVG","withinChartClip","idSelector","svg","appendOrSelect","chartClipId","get","options","merge"],"mappings":"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","sourcesContent":["import { DOMUtils } from '../services';\nimport { Tools } from '../tools';\n// D3 Imports\nimport { select } from 'd3-selection';\n// import the settings for the css prefix\nimport settings from 'carbon-components/es/globals/js/settings';\nvar Component = /** @class */ (function () {\n    function Component(model, services, configs) {\n        this.configs = {};\n        this.model = model;\n        this.services = services;\n        if (configs) {\n            this.configs = configs;\n            if (this.configs.id) {\n                var chartprefix = Tools.getProperty(this.model.getOptions(), 'style', 'prefix');\n                this.id = chartprefix + \"--\" + this.configs.id;\n            }\n        }\n        // Set parent element to shell SVG if no parent exists for component\n        if (!this.parent) {\n            this.setParent(select(this.services.domUtils.getMainSVG()));\n        }\n    }\n    Component.prototype.init = function () { };\n    Component.prototype.render = function (animate) {\n        if (animate === void 0) { animate = true; }\n        console.error('render() method is not implemented');\n    };\n    Component.prototype.destroy = function () { };\n    // Used to pass down information to the components\n    Component.prototype.setModel = function (newObj) {\n        this.model = newObj;\n    };\n    // Used to pass down information to the components\n    Component.prototype.setServices = function (newObj) {\n        this.services = newObj;\n    };\n    Component.prototype.setParent = function (parent) {\n        var oldParent = this.parent;\n        this.parent = parent;\n        if (oldParent && oldParent.node() === parent.node()) {\n            return;\n        }\n        if (this.type) {\n            var chartprefix = Tools.getProperty(this.model.getOptions(), 'style', 'prefix');\n            this.parent\n                .classed(settings.prefix + \"--\" + chartprefix + \"--\" + this.type, true)\n                .attr('id', this.id);\n            if (oldParent) {\n                oldParent\n                    .classed(settings.prefix + \"--\" + chartprefix + \"--\" + this.type, false)\n                    .attr('id', this.id);\n            }\n        }\n    };\n    Component.prototype.getParent = function () {\n        return this.parent;\n    };\n    Component.prototype.getContainerSVG = function (configs) {\n        if (configs === void 0) { configs = { withinChartClip: false }; }\n        if (this.type) {\n            var chartprefix = Tools.getProperty(this.model.getOptions(), 'style', 'prefix');\n            var idSelector = this.id ? \"#\" + this.id : '';\n            var svg = DOMUtils.appendOrSelect(this.parent, \"g\" + idSelector + \".\" + settings.prefix + \"--\" + chartprefix + \"--\" + this.type);\n            if (configs.withinChartClip) {\n                // get unique chartClipId int this chart from model\n                var chartClipId = this.model.get('chartClipId');\n                if (chartClipId) {\n                    svg.attr('clip-path', \"url(#\" + chartClipId + \")\");\n                }\n            }\n            return svg;\n        }\n        return this.parent;\n    };\n    /**\n     * graphs used in combo charts share a model with global options but can receive their own local options.\n     * this function retrieves the global options and merges it with any options passed into this\n     * component's config.options object.\n     */\n    Component.prototype.getOptions = function () {\n        if (this.configs.options) {\n            var options = Tools.merge({}, this.model.getOptions(), this.configs.options);\n            return options;\n        }\n        return this.model.getOptions();\n    };\n    return Component;\n}());\nexport { Component };\n//# sourceMappingURL=../../src/components/component.js.map"]},"metadata":{},"sourceType":"module"}