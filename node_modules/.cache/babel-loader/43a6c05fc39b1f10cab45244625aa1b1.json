{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // Internal Imports\n\n\nimport { Component } from '../component';\nimport { Tools } from '../../tools';\nimport { AxisPositions, Events, ScaleTypes, ZoomBarTypes } from '../../interfaces';\nimport { DOMUtils } from '../../services';\nimport * as Configuration from '../../configuration'; // D3 Imports\n\nimport { extent } from 'd3-array';\nimport { brushX } from 'd3-brush';\nimport { area, line } from 'd3-shape';\nimport { event } from 'd3-selection';\n\nvar ZoomBar =\n/** @class */\nfunction (_super) {\n  __extends(ZoomBar, _super);\n\n  function ZoomBar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'zoom-bar'; // The minimum selection x range to trigger handler update\n    // Smaller number may introduce a handler flash during initialization\n    // Bigger number may not trigger handler update while selection area on chart is very small\n\n    _this.MIN_SELECTION_DIFF = 9e-10; // needs to match the style in _zoom-bar.scss\n\n    _this.brushSelector = 'g.zoom-bar-brush'; // Give every zoomBarClip a distinct ID\n    // so they don't interfere the other zoom bars in a page\n\n    _this.clipId = 'zoomBarClip-' + Math.floor(Math.random() * 99999999999);\n    _this.brush = brushX();\n    return _this;\n  }\n\n  ZoomBar.prototype.init = function () {\n    this.services.events.addEventListener(Events.ZoomBar.UPDATE, this.render.bind(this)); // check if pre-defined zoom bar data exists\n\n    var definedZoomBarData = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'data'); // load up the zoomBarData into this model\n\n    this.model.setZoomBarData(definedZoomBarData);\n  };\n\n  ZoomBar.prototype.render = function (animate) {\n    var _this = this;\n\n    if (animate === void 0) {\n      animate = true;\n    }\n\n    var svg = this.getContainerSVG();\n    var isTopZoomBarLoading = this.services.zoom.isZoomBarLoading(AxisPositions.TOP);\n    var isTopZoomBarLocked = this.services.zoom.isZoomBarLocked(AxisPositions.TOP);\n    var zoombarType = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n    var zoombarHeight = Configuration.zoomBar.height[zoombarType];\n    var width = DOMUtils.getSVGElementSize(this.parent, {\n      useAttrs: true\n    }).width; // initialization is not completed yet\n\n    if (width === 0) {\n      return;\n    } // get axes margins\n\n\n    var axesLeftMargin = 0;\n    var axesMargins = this.model.get('axesMargins');\n\n    if (axesMargins && axesMargins.left) {\n      axesLeftMargin = axesMargins.left;\n    }\n\n    var container = DOMUtils.appendOrSelect(svg, 'svg.zoom-container').attr('width', '100%').attr('height', zoombarHeight).attr('opacity', 1);\n    var spacer = DOMUtils.appendOrSelect(svg, 'rect.zoom-spacer').attr('x', 0).attr('y', zoombarHeight).attr('width', '100%').attr('height', Configuration.zoomBar.spacerHeight).attr('opacity', 1).attr('fill', 'none');\n\n    if (zoombarType === ZoomBarTypes.GRAPH_VIEW) {\n      // Draw zoombar background rectangle\n      DOMUtils.appendOrSelect(container, 'rect.zoom-bg').attr('x', axesLeftMargin).attr('y', 0).attr('width', width - axesLeftMargin).attr('height', '100%').classed('zoom-bg-skeleton', isTopZoomBarLoading);\n    } else if (zoombarType === ZoomBarTypes.SLIDER_VIEW) {\n      // Draw zoombar background line\n      DOMUtils.appendOrSelect(container, 'rect.zoom-slider-bg').attr('x', axesLeftMargin).attr('y', zoombarHeight / 2 - 1).attr('width', width - axesLeftMargin).attr('height', 2).classed('zoom-slider-bg-skeleton', isTopZoomBarLoading);\n    }\n\n    if (isTopZoomBarLoading) {\n      this.renderSkeleton(container, axesLeftMargin, width);\n      return;\n    }\n\n    var cartesianScales = this.services.cartesianScales;\n    var mainXScale = cartesianScales.getMainXScale();\n    var mainYScale = cartesianScales.getMainYScale();\n    var mainXScaleType = cartesianScales.getMainXScaleType();\n\n    if (mainXScale && mainXScaleType === ScaleTypes.TIME) {\n      var zoomBarData = this.services.zoom.getZoomBarData();\n\n      if (Tools.isEmpty(zoomBarData)) {\n        // if there's no zoom bar data we can't do anything\n        return;\n      }\n\n      this.xScale = mainXScale.copy();\n      this.yScale = mainYScale.copy();\n      var defaultDomain = this.services.zoom.getDefaultZoomBarDomain(zoomBarData); // add value 0 to the extended domain for zoom bar area graph\n\n      zoomBarData = this.compensateDataForDefaultDomain(zoomBarData, defaultDomain); // get old initialZoomDomain from model\n\n      var oldInitialZoomDomain = this.model.get('initialZoomDomain'); // get new initialZoomDomain from option\n\n      var newInitialZoomDomain = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'initialZoomDomain'); // change string date to Date object if necessary\n\n      if (newInitialZoomDomain && newInitialZoomDomain[0] && newInitialZoomDomain[1]) {\n        newInitialZoomDomain[0] = new Date(newInitialZoomDomain[0]);\n        newInitialZoomDomain[1] = new Date(newInitialZoomDomain[1]);\n      } // update initialZoomDomain and set zoomDomain in model only if the option is changed\n      // not the same object, and both start date and end date are not equal\n\n\n      if (newInitialZoomDomain && !(oldInitialZoomDomain && oldInitialZoomDomain[0].valueOf() === newInitialZoomDomain[0].valueOf() && oldInitialZoomDomain[1].valueOf() === newInitialZoomDomain[1].valueOf())) {\n        this.model.set({\n          // use a new object instead of newInitialZoomDomain\n          initialZoomDomain: Tools.merge([], newInitialZoomDomain),\n          zoomDomain: newInitialZoomDomain ? Tools.merge([], newInitialZoomDomain) : defaultDomain\n        }, {\n          skipUpdate: true\n        });\n      } else if (newInitialZoomDomain === null && oldInitialZoomDomain != null) {\n        // if newInitialZoomDomain is set to null (when oldInitialZoomDomain is not null)\n        // save initialZoomDomain and reset zoom domain to default domain\n        this.model.set({\n          initialZoomDomain: null,\n          zoomDomain: Tools.merge([], defaultDomain)\n        }, {\n          skipUpdate: true\n        });\n      }\n\n      this.xScale.range([axesLeftMargin, width]).domain(defaultDomain); // keep max selection range\n\n      this.maxSelectionRange = this.xScale.range();\n      this.yScale.range([0, zoombarHeight - 6]).domain(extent(zoomBarData, function (d) {\n        return d.value;\n      }));\n      var zoomDomain = this.model.get('zoomDomain');\n\n      if (zoombarType === ZoomBarTypes.GRAPH_VIEW) {\n        this.renderZoomBarArea(container, 'path.zoom-graph-area-unselected', zoomBarData, null);\n        this.updateClipPath(svg, this.clipId, 0, 0, 0, 0);\n        this.renderZoomBarArea(container, 'path.zoom-graph-area', zoomBarData, this.clipId); // Draw the zoom bar base line\n\n        this.renderZoomBarBaseline(container, axesLeftMargin, width);\n      } // Attach brushing event listeners\n\n\n      this.addBrushEventListener(zoomDomain, axesLeftMargin, width); // Draw the brushing area\n\n      var brushArea = DOMUtils.appendOrSelect(svg, this.brushSelector).call(this.brush);\n\n      if (zoomDomain === undefined) {// do nothing, initialization not completed yet\n        // don't update brushHandle to avoid flash\n      } else if (zoomDomain[0].valueOf() === zoomDomain[1].valueOf()) {\n        brushArea.call(this.brush.move, this.xScale.range()); // default to full range\n\n        this.updateBrushHandle(this.getContainerSVG(), this.xScale.range(), this.xScale.domain());\n      } else {\n        var selected = zoomDomain.map(function (domain) {\n          return _this.xScale(domain);\n        });\n\n        if (selected[1] - selected[0] < this.MIN_SELECTION_DIFF) {// initialization not completed yet\n          // don't update brushHandle to avoid flash\n        } else {\n          brushArea.call(this.brush.move, selected); // set brush to correct position\n\n          this.updateBrushHandle(this.getContainerSVG(), selected, zoomDomain);\n        }\n      }\n\n      if (isTopZoomBarLocked) {\n        this.brush.filter(function () {\n          return false;\n        }); // reset all cursor to auto\n\n        brushArea.selectAll('rect').attr('cursor', 'auto');\n      }\n    }\n  };\n\n  ZoomBar.prototype.addBrushEventListener = function (zoomDomain, axesLeftMargin, width) {\n    var _this = this;\n\n    var brushEventListener = function brushEventListener() {\n      var selection = event.selection; // follow d3 behavior: when selection is null, reset default full range\n      // select behavior is completed, but nothing selected\n\n      if (selection === null) {\n        _this.handleBrushedEvent(zoomDomain, _this.xScale, _this.xScale.range());\n      } else if (selection[0] === selection[1]) {// select behavior is not completed yet, do nothing\n      } else {\n        _this.handleBrushedEvent(zoomDomain, _this.xScale, selection);\n      }\n    };\n\n    var zoombarType = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n    var zoombarHeight = Configuration.zoomBar.height[zoombarType]; // Initialize the d3 brush\n\n    this.brush.extent([[axesLeftMargin, 0], [width, zoombarHeight]]).on('start brush end', null) // remove old listener first\n    .on('start brush end', brushEventListener);\n  }; // brush event listener\n\n\n  ZoomBar.prototype.handleBrushedEvent = function (zoomDomain, scale, selection) {\n    var newDomain = [scale.invert(selection[0]), scale.invert(selection[1])]; // update brush handle position\n\n    this.updateBrushHandle(this.getContainerSVG(), selection, newDomain); // be aware that the value of d3.event changes during an event!\n    // update zoomDomain only if the event comes from mouse/touch event\n\n    if (event.sourceEvent != null && (event.sourceEvent.type === 'mousemove' || event.sourceEvent.type === 'mouseup' || event.sourceEvent.type === 'mousedown' || event.sourceEvent.type === 'touchstart' || event.sourceEvent.type === 'touchmove' || event.sourceEvent.type === 'touchend')) {\n      // only if zoomDomain is never set or needs update\n      if (zoomDomain === undefined || zoomDomain[0] !== newDomain[0] || zoomDomain[1] !== newDomain[1]) {\n        // don't dispatch event for all event types\n        // let the following code to dispatch necessary events\n        this.services.zoom.handleDomainChange(newDomain, {\n          dispatchEvent: false\n        });\n      } // dispatch selection events\n\n\n      var zoomBarEventType = void 0;\n\n      if (event.type === 'start') {\n        zoomBarEventType = Events.ZoomBar.SELECTION_START;\n      } else if (event.type === 'brush') {\n        zoomBarEventType = Events.ZoomBar.SELECTION_IN_PROGRESS;\n      } else if (event.type === 'end') {\n        zoomBarEventType = Events.ZoomBar.SELECTION_END; // only dispatch zoom domain change event for triggering api call when event type equals to end\n\n        this.services.events.dispatchEvent(Events.ZoomDomain.CHANGE, {\n          newDomain: newDomain\n        });\n      }\n\n      this.services.events.dispatchEvent(zoomBarEventType, {\n        selection: selection,\n        newDomain: newDomain\n      });\n    }\n  };\n\n  ZoomBar.prototype.updateBrushHandle = function (svg, selection, domain) {\n    var self = this;\n    var handleWidth = Configuration.zoomBar.handleWidth;\n    var zoombarType = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n    var handleHeight = Configuration.zoomBar.height[zoombarType];\n    var handleXDiff = -handleWidth / 2;\n    var handleBarWidth = Configuration.zoomBar.handleBarWidth;\n    var handleBarHeight = zoombarType === ZoomBarTypes.GRAPH_VIEW ? Configuration.zoomBar.handleBarHeight : 6;\n    var handleBarXDiff = -handleBarWidth / 2;\n    var handleYBarDiff = (handleHeight - handleBarHeight) / 2; // handle\n\n    svg.select(this.brushSelector).selectAll('rect.handle').data([{\n      type: 'w'\n    }, {\n      type: 'e'\n    }]).attr('x', function (d) {\n      if (d.type === 'w') {\n        // handle should not exceed zoom bar range\n        return Math.max(selection[0] + handleXDiff, self.maxSelectionRange[0]);\n      } else if (d.type === 'e') {\n        // handle should not exceed zoom bar range\n        return Math.min(selection[1] + handleXDiff, self.maxSelectionRange[1] - handleWidth);\n      }\n    }).attr('y', 0).attr('width', handleWidth).attr('height', handleHeight).attr('cursor', 'ew-resize').style('display', null); // always display\n    // handle-bar\n\n    var handleBars = svg.select(this.brushSelector).selectAll('rect.handle-bar').data([{\n      type: 'w'\n    }, {\n      type: 'e'\n    }]); // create rect if not exists\n\n    handleBars.enter().append('rect').attr('class', function (d) {\n      return 'handle-bar handle-bar--' + d.type;\n    }); // update positions\n\n    handleBars.attr('x', function (d) {\n      if (d.type === 'w') {\n        return Math.max(selection[0] + handleBarXDiff, self.maxSelectionRange[0] - handleXDiff + handleBarXDiff);\n      } else if (d.type === 'e') {\n        return Math.min(selection[1] + handleBarXDiff, self.maxSelectionRange[1] + handleXDiff + handleBarXDiff);\n      }\n    }).attr('y', handleYBarDiff).attr('width', handleBarWidth).attr('height', handleBarHeight).attr('cursor', 'ew-resize'); // Update slider selected area\n\n    if (zoombarType === ZoomBarTypes.SLIDER_VIEW) {\n      this.updateSliderSelectedArea(selection);\n    }\n\n    this.updateClipPath(svg, this.clipId, selection[0], 0, selection[1] - selection[0], handleHeight);\n  };\n\n  ZoomBar.prototype.updateSliderSelectedArea = function (selection) {\n    var zoombarType = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n    var zoombarHeight = Configuration.zoomBar.height[zoombarType];\n    var width = DOMUtils.getSVGElementSize(this.parent, {\n      useAttrs: true\n    }).width; // get axes margins\n\n    var axesLeftMargin = 0;\n    var axesMargins = this.model.get('axesMargins');\n\n    if (axesMargins && axesMargins.left) {\n      axesLeftMargin = axesMargins.left;\n    }\n\n    var svg = this.getContainerSVG();\n    var container = svg.select('svg.zoom-container'); // Draw zoombar background line\n\n    DOMUtils.appendOrSelect(container, 'rect.zoom-slider-selected-area').attr('x', selection[0]).attr('y', zoombarHeight / 2 - 1).attr('width', selection[1] - selection[0]).attr('height', 2);\n  };\n\n  ZoomBar.prototype.renderZoomBarArea = function (container, querySelector, data, clipId) {\n    var cartesianScales = this.services.cartesianScales;\n    var mainXAxisPosition = cartesianScales.getMainXAxisPosition();\n    var mainYAxisPosition = cartesianScales.getMainYAxisPosition();\n    var mainXScaleType = cartesianScales.getMainXScaleType();\n    var mainYScaleType = cartesianScales.getMainYScaleType();\n\n    var accessorFunction = function accessorFunction(scale, scaleType, axisPosition) {\n      return function (d, i) {\n        return cartesianScales.getValueFromScale(scale, scaleType, axisPosition, d, i);\n      };\n    };\n\n    var xAccessor = accessorFunction(this.xScale, mainXScaleType, mainXAxisPosition);\n    var yAccessor = accessorFunction(this.yScale, mainYScaleType, mainYAxisPosition);\n    var zoombarType = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n    var zoombarHeight = Configuration.zoomBar.height[zoombarType];\n    var areaGenerator = area().x(function (d, i) {\n      return xAccessor(d, i);\n    }).y0(zoombarHeight).y1(function (d, i) {\n      return zoombarHeight - yAccessor(d, i);\n    });\n    var areaGraph = DOMUtils.appendOrSelect(container, querySelector).datum(data).attr('d', areaGenerator);\n\n    if (clipId) {\n      areaGraph.attr('clip-path', \"url(#\" + clipId + \")\");\n    }\n  };\n\n  ZoomBar.prototype.updateClipPath = function (svg, clipId, x, y, width, height) {\n    var zoomBarClipPath = DOMUtils.appendOrSelect(svg, \"clipPath\").attr('id', clipId);\n    DOMUtils.appendOrSelect(zoomBarClipPath, 'rect').attr('x', x).attr('y', y).attr('width', width).attr('height', height);\n  }; // assume the domains in data are already sorted\n\n\n  ZoomBar.prototype.compensateDataForDefaultDomain = function (data, defaultDomain) {\n    if (!data || data.length < 2) {\n      return;\n    }\n\n    var zoomBarData = Tools.clone(data);\n    var domainIdentifier = this.services.cartesianScales.getDomainIdentifier();\n    var rangeIdentifier = this.services.cartesianScales.getRangeIdentifier(); // if min domain is extended\n\n    if (Number(defaultDomain[0]) < Number(zoomBarData[0][domainIdentifier])) {\n      var newDatum = {};\n      newDatum[domainIdentifier] = defaultDomain[0];\n      newDatum[rangeIdentifier] = 0;\n      zoomBarData.unshift(newDatum);\n    } // if max domain is extended\n\n\n    if (Number(defaultDomain[1]) > Number(zoomBarData[zoomBarData.length - 1][domainIdentifier])) {\n      var newDatum = {};\n      newDatum[domainIdentifier] = defaultDomain[1];\n      newDatum[rangeIdentifier] = 0;\n      zoomBarData.push(newDatum);\n    }\n\n    return zoomBarData;\n  };\n\n  ZoomBar.prototype.renderZoomBarBaseline = function (container, startX, endX, skeletonClass) {\n    if (skeletonClass === void 0) {\n      skeletonClass = false;\n    }\n\n    var zoombarType = Tools.getProperty(this.model.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n    var zoombarHeight = Configuration.zoomBar.height[zoombarType];\n    var baselineGenerator = line()([[startX, zoombarHeight], [endX, zoombarHeight]]);\n    DOMUtils.appendOrSelect(container, 'path.zoom-bg-baseline').attr('d', baselineGenerator).classed('zoom-bg-baseline-skeleton', skeletonClass);\n  };\n\n  ZoomBar.prototype.renderSkeleton = function (container, startX, endX) {\n    // need to clear current zoom bar area\n    this.renderZoomBarArea(container, 'path.zoom-graph-area-unselected', [], null);\n    this.renderZoomBarArea(container, 'path.zoom-graph-area', [], this.clipId); // remove brush listener\n\n    this.brush.on('start brush end', null); // clear d3 brush\n\n    DOMUtils.appendOrSelect(this.getContainerSVG(), this.brushSelector).html(null); // re-render baseline because no axis labels in skeleton so the baseline length needs to change\n\n    var zoombarType = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n\n    if (zoombarType === ZoomBarTypes.GRAPH_VIEW) {\n      this.renderZoomBarBaseline(container, startX, endX, true);\n    }\n  };\n\n  ZoomBar.prototype.destroy = function () {\n    this.brush.on('start brush end', null); // remove event listener\n\n    this.services.events.removeEventListener(Events.ZoomBar.UPDATE, this.render.bind(this));\n  };\n\n  return ZoomBar;\n}(Component);\n\nexport { ZoomBar };","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/@carbon/charts/components/axes/zoom-bar.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Component","Tools","AxisPositions","Events","ScaleTypes","ZoomBarTypes","DOMUtils","Configuration","extent","brushX","area","line","event","ZoomBar","_super","_this","apply","arguments","type","MIN_SELECTION_DIFF","brushSelector","clipId","Math","floor","random","brush","init","services","events","addEventListener","UPDATE","render","bind","definedZoomBarData","getProperty","getOptions","TOP","model","setZoomBarData","animate","svg","getContainerSVG","isTopZoomBarLoading","zoom","isZoomBarLoading","isTopZoomBarLocked","isZoomBarLocked","zoombarType","zoombarHeight","zoomBar","height","width","getSVGElementSize","parent","useAttrs","axesLeftMargin","axesMargins","get","left","container","appendOrSelect","attr","spacer","spacerHeight","GRAPH_VIEW","classed","SLIDER_VIEW","renderSkeleton","cartesianScales","mainXScale","getMainXScale","mainYScale","getMainYScale","mainXScaleType","getMainXScaleType","TIME","zoomBarData","getZoomBarData","isEmpty","xScale","copy","yScale","defaultDomain","getDefaultZoomBarDomain","compensateDataForDefaultDomain","oldInitialZoomDomain","newInitialZoomDomain","Date","valueOf","set","initialZoomDomain","merge","zoomDomain","skipUpdate","range","domain","maxSelectionRange","value","renderZoomBarArea","updateClipPath","renderZoomBarBaseline","addBrushEventListener","brushArea","call","undefined","move","updateBrushHandle","selected","map","filter","selectAll","brushEventListener","selection","handleBrushedEvent","on","scale","newDomain","invert","sourceEvent","handleDomainChange","dispatchEvent","zoomBarEventType","SELECTION_START","SELECTION_IN_PROGRESS","SELECTION_END","ZoomDomain","CHANGE","self","handleWidth","handleHeight","handleXDiff","handleBarWidth","handleBarHeight","handleBarXDiff","handleYBarDiff","select","data","max","min","style","handleBars","enter","append","updateSliderSelectedArea","querySelector","mainXAxisPosition","getMainXAxisPosition","mainYAxisPosition","getMainYAxisPosition","mainYScaleType","getMainYScaleType","accessorFunction","scaleType","axisPosition","i","getValueFromScale","xAccessor","yAccessor","areaGenerator","x","y0","y1","areaGraph","datum","y","zoomBarClipPath","length","clone","domainIdentifier","getDomainIdentifier","rangeIdentifier","getRangeIdentifier","Number","newDatum","unshift","push","startX","endX","skeletonClass","baselineGenerator","html","destroy","removeEventListener"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// Internal Imports\nimport { Component } from '../component';\nimport { Tools } from '../../tools';\nimport { AxisPositions, Events, ScaleTypes, ZoomBarTypes, } from '../../interfaces';\nimport { DOMUtils } from '../../services';\nimport * as Configuration from '../../configuration';\n// D3 Imports\nimport { extent } from 'd3-array';\nimport { brushX } from 'd3-brush';\nimport { area, line } from 'd3-shape';\nimport { event } from 'd3-selection';\nvar ZoomBar = /** @class */ (function (_super) {\n    __extends(ZoomBar, _super);\n    function ZoomBar() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'zoom-bar';\n        // The minimum selection x range to trigger handler update\n        // Smaller number may introduce a handler flash during initialization\n        // Bigger number may not trigger handler update while selection area on chart is very small\n        _this.MIN_SELECTION_DIFF = 9e-10;\n        // needs to match the style in _zoom-bar.scss\n        _this.brushSelector = 'g.zoom-bar-brush';\n        // Give every zoomBarClip a distinct ID\n        // so they don't interfere the other zoom bars in a page\n        _this.clipId = 'zoomBarClip-' + Math.floor(Math.random() * 99999999999);\n        _this.brush = brushX();\n        return _this;\n    }\n    ZoomBar.prototype.init = function () {\n        this.services.events.addEventListener(Events.ZoomBar.UPDATE, this.render.bind(this));\n        // check if pre-defined zoom bar data exists\n        var definedZoomBarData = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'data');\n        // load up the zoomBarData into this model\n        this.model.setZoomBarData(definedZoomBarData);\n    };\n    ZoomBar.prototype.render = function (animate) {\n        var _this = this;\n        if (animate === void 0) { animate = true; }\n        var svg = this.getContainerSVG();\n        var isTopZoomBarLoading = this.services.zoom.isZoomBarLoading(AxisPositions.TOP);\n        var isTopZoomBarLocked = this.services.zoom.isZoomBarLocked(AxisPositions.TOP);\n        var zoombarType = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n        var zoombarHeight = Configuration.zoomBar.height[zoombarType];\n        var width = DOMUtils.getSVGElementSize(this.parent, {\n            useAttrs: true,\n        }).width;\n        // initialization is not completed yet\n        if (width === 0) {\n            return;\n        }\n        // get axes margins\n        var axesLeftMargin = 0;\n        var axesMargins = this.model.get('axesMargins');\n        if (axesMargins && axesMargins.left) {\n            axesLeftMargin = axesMargins.left;\n        }\n        var container = DOMUtils.appendOrSelect(svg, 'svg.zoom-container')\n            .attr('width', '100%')\n            .attr('height', zoombarHeight)\n            .attr('opacity', 1);\n        var spacer = DOMUtils.appendOrSelect(svg, 'rect.zoom-spacer')\n            .attr('x', 0)\n            .attr('y', zoombarHeight)\n            .attr('width', '100%')\n            .attr('height', Configuration.zoomBar.spacerHeight)\n            .attr('opacity', 1)\n            .attr('fill', 'none');\n        if (zoombarType === ZoomBarTypes.GRAPH_VIEW) {\n            // Draw zoombar background rectangle\n            DOMUtils.appendOrSelect(container, 'rect.zoom-bg')\n                .attr('x', axesLeftMargin)\n                .attr('y', 0)\n                .attr('width', width - axesLeftMargin)\n                .attr('height', '100%')\n                .classed('zoom-bg-skeleton', isTopZoomBarLoading);\n        }\n        else if (zoombarType === ZoomBarTypes.SLIDER_VIEW) {\n            // Draw zoombar background line\n            DOMUtils.appendOrSelect(container, 'rect.zoom-slider-bg')\n                .attr('x', axesLeftMargin)\n                .attr('y', zoombarHeight / 2 - 1)\n                .attr('width', width - axesLeftMargin)\n                .attr('height', 2)\n                .classed('zoom-slider-bg-skeleton', isTopZoomBarLoading);\n        }\n        if (isTopZoomBarLoading) {\n            this.renderSkeleton(container, axesLeftMargin, width);\n            return;\n        }\n        var cartesianScales = this.services.cartesianScales;\n        var mainXScale = cartesianScales.getMainXScale();\n        var mainYScale = cartesianScales.getMainYScale();\n        var mainXScaleType = cartesianScales.getMainXScaleType();\n        if (mainXScale && mainXScaleType === ScaleTypes.TIME) {\n            var zoomBarData = this.services.zoom.getZoomBarData();\n            if (Tools.isEmpty(zoomBarData)) {\n                // if there's no zoom bar data we can't do anything\n                return;\n            }\n            this.xScale = mainXScale.copy();\n            this.yScale = mainYScale.copy();\n            var defaultDomain = this.services.zoom.getDefaultZoomBarDomain(zoomBarData);\n            // add value 0 to the extended domain for zoom bar area graph\n            zoomBarData = this.compensateDataForDefaultDomain(zoomBarData, defaultDomain);\n            // get old initialZoomDomain from model\n            var oldInitialZoomDomain = this.model.get('initialZoomDomain');\n            // get new initialZoomDomain from option\n            var newInitialZoomDomain = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'initialZoomDomain');\n            // change string date to Date object if necessary\n            if (newInitialZoomDomain &&\n                newInitialZoomDomain[0] &&\n                newInitialZoomDomain[1]) {\n                newInitialZoomDomain[0] = new Date(newInitialZoomDomain[0]);\n                newInitialZoomDomain[1] = new Date(newInitialZoomDomain[1]);\n            }\n            // update initialZoomDomain and set zoomDomain in model only if the option is changed\n            // not the same object, and both start date and end date are not equal\n            if (newInitialZoomDomain &&\n                !(oldInitialZoomDomain &&\n                    oldInitialZoomDomain[0].valueOf() ===\n                        newInitialZoomDomain[0].valueOf() &&\n                    oldInitialZoomDomain[1].valueOf() ===\n                        newInitialZoomDomain[1].valueOf())) {\n                this.model.set({\n                    // use a new object instead of newInitialZoomDomain\n                    initialZoomDomain: Tools.merge([], newInitialZoomDomain),\n                    zoomDomain: newInitialZoomDomain\n                        ? Tools.merge([], newInitialZoomDomain)\n                        : defaultDomain,\n                }, { skipUpdate: true });\n            }\n            else if (newInitialZoomDomain === null &&\n                oldInitialZoomDomain != null) {\n                // if newInitialZoomDomain is set to null (when oldInitialZoomDomain is not null)\n                // save initialZoomDomain and reset zoom domain to default domain\n                this.model.set({\n                    initialZoomDomain: null,\n                    zoomDomain: Tools.merge([], defaultDomain),\n                }, { skipUpdate: true });\n            }\n            this.xScale.range([axesLeftMargin, width]).domain(defaultDomain);\n            // keep max selection range\n            this.maxSelectionRange = this.xScale.range();\n            this.yScale\n                .range([0, zoombarHeight - 6])\n                .domain(extent(zoomBarData, function (d) { return d.value; }));\n            var zoomDomain = this.model.get('zoomDomain');\n            if (zoombarType === ZoomBarTypes.GRAPH_VIEW) {\n                this.renderZoomBarArea(container, 'path.zoom-graph-area-unselected', zoomBarData, null);\n                this.updateClipPath(svg, this.clipId, 0, 0, 0, 0);\n                this.renderZoomBarArea(container, 'path.zoom-graph-area', zoomBarData, this.clipId);\n                // Draw the zoom bar base line\n                this.renderZoomBarBaseline(container, axesLeftMargin, width);\n            }\n            // Attach brushing event listeners\n            this.addBrushEventListener(zoomDomain, axesLeftMargin, width);\n            // Draw the brushing area\n            var brushArea = DOMUtils.appendOrSelect(svg, this.brushSelector).call(this.brush);\n            if (zoomDomain === undefined) {\n                // do nothing, initialization not completed yet\n                // don't update brushHandle to avoid flash\n            }\n            else if (zoomDomain[0].valueOf() === zoomDomain[1].valueOf()) {\n                brushArea.call(this.brush.move, this.xScale.range()); // default to full range\n                this.updateBrushHandle(this.getContainerSVG(), this.xScale.range(), this.xScale.domain());\n            }\n            else {\n                var selected = zoomDomain.map(function (domain) {\n                    return _this.xScale(domain);\n                });\n                if (selected[1] - selected[0] < this.MIN_SELECTION_DIFF) {\n                    // initialization not completed yet\n                    // don't update brushHandle to avoid flash\n                }\n                else {\n                    brushArea.call(this.brush.move, selected); // set brush to correct position\n                    this.updateBrushHandle(this.getContainerSVG(), selected, zoomDomain);\n                }\n            }\n            if (isTopZoomBarLocked) {\n                this.brush.filter(function () {\n                    return false;\n                });\n                // reset all cursor to auto\n                brushArea.selectAll('rect').attr('cursor', 'auto');\n            }\n        }\n    };\n    ZoomBar.prototype.addBrushEventListener = function (zoomDomain, axesLeftMargin, width) {\n        var _this = this;\n        var brushEventListener = function () {\n            var selection = event.selection;\n            // follow d3 behavior: when selection is null, reset default full range\n            // select behavior is completed, but nothing selected\n            if (selection === null) {\n                _this.handleBrushedEvent(zoomDomain, _this.xScale, _this.xScale.range());\n            }\n            else if (selection[0] === selection[1]) {\n                // select behavior is not completed yet, do nothing\n            }\n            else {\n                _this.handleBrushedEvent(zoomDomain, _this.xScale, selection);\n            }\n        };\n        var zoombarType = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n        var zoombarHeight = Configuration.zoomBar.height[zoombarType];\n        // Initialize the d3 brush\n        this.brush\n            .extent([\n            [axesLeftMargin, 0],\n            [width, zoombarHeight],\n        ])\n            .on('start brush end', null) // remove old listener first\n            .on('start brush end', brushEventListener);\n    };\n    // brush event listener\n    ZoomBar.prototype.handleBrushedEvent = function (zoomDomain, scale, selection) {\n        var newDomain = [\n            scale.invert(selection[0]),\n            scale.invert(selection[1]),\n        ];\n        // update brush handle position\n        this.updateBrushHandle(this.getContainerSVG(), selection, newDomain);\n        // be aware that the value of d3.event changes during an event!\n        // update zoomDomain only if the event comes from mouse/touch event\n        if (event.sourceEvent != null &&\n            (event.sourceEvent.type === 'mousemove' ||\n                event.sourceEvent.type === 'mouseup' ||\n                event.sourceEvent.type === 'mousedown' ||\n                event.sourceEvent.type === 'touchstart' ||\n                event.sourceEvent.type === 'touchmove' ||\n                event.sourceEvent.type === 'touchend')) {\n            // only if zoomDomain is never set or needs update\n            if (zoomDomain === undefined ||\n                zoomDomain[0] !== newDomain[0] ||\n                zoomDomain[1] !== newDomain[1]) {\n                // don't dispatch event for all event types\n                // let the following code to dispatch necessary events\n                this.services.zoom.handleDomainChange(newDomain, {\n                    dispatchEvent: false,\n                });\n            }\n            // dispatch selection events\n            var zoomBarEventType = void 0;\n            if (event.type === 'start') {\n                zoomBarEventType = Events.ZoomBar.SELECTION_START;\n            }\n            else if (event.type === 'brush') {\n                zoomBarEventType = Events.ZoomBar.SELECTION_IN_PROGRESS;\n            }\n            else if (event.type === 'end') {\n                zoomBarEventType = Events.ZoomBar.SELECTION_END;\n                // only dispatch zoom domain change event for triggering api call when event type equals to end\n                this.services.events.dispatchEvent(Events.ZoomDomain.CHANGE, {\n                    newDomain: newDomain,\n                });\n            }\n            this.services.events.dispatchEvent(zoomBarEventType, {\n                selection: selection,\n                newDomain: newDomain,\n            });\n        }\n    };\n    ZoomBar.prototype.updateBrushHandle = function (svg, selection, domain) {\n        var self = this;\n        var handleWidth = Configuration.zoomBar.handleWidth;\n        var zoombarType = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n        var handleHeight = Configuration.zoomBar.height[zoombarType];\n        var handleXDiff = -handleWidth / 2;\n        var handleBarWidth = Configuration.zoomBar.handleBarWidth;\n        var handleBarHeight = zoombarType === ZoomBarTypes.GRAPH_VIEW\n            ? Configuration.zoomBar.handleBarHeight\n            : 6;\n        var handleBarXDiff = -handleBarWidth / 2;\n        var handleYBarDiff = (handleHeight - handleBarHeight) / 2;\n        // handle\n        svg.select(this.brushSelector)\n            .selectAll('rect.handle')\n            .data([{ type: 'w' }, { type: 'e' }])\n            .attr('x', function (d) {\n            if (d.type === 'w') {\n                // handle should not exceed zoom bar range\n                return Math.max(selection[0] + handleXDiff, self.maxSelectionRange[0]);\n            }\n            else if (d.type === 'e') {\n                // handle should not exceed zoom bar range\n                return Math.min(selection[1] + handleXDiff, self.maxSelectionRange[1] - handleWidth);\n            }\n        })\n            .attr('y', 0)\n            .attr('width', handleWidth)\n            .attr('height', handleHeight)\n            .attr('cursor', 'ew-resize')\n            .style('display', null); // always display\n        // handle-bar\n        var handleBars = svg\n            .select(this.brushSelector)\n            .selectAll('rect.handle-bar')\n            .data([{ type: 'w' }, { type: 'e' }]);\n        // create rect if not exists\n        handleBars\n            .enter()\n            .append('rect')\n            .attr('class', function (d) {\n            return 'handle-bar handle-bar--' + d.type;\n        });\n        // update positions\n        handleBars\n            .attr('x', function (d) {\n            if (d.type === 'w') {\n                return Math.max(selection[0] + handleBarXDiff, self.maxSelectionRange[0] - handleXDiff + handleBarXDiff);\n            }\n            else if (d.type === 'e') {\n                return Math.min(selection[1] + handleBarXDiff, self.maxSelectionRange[1] + handleXDiff + handleBarXDiff);\n            }\n        })\n            .attr('y', handleYBarDiff)\n            .attr('width', handleBarWidth)\n            .attr('height', handleBarHeight)\n            .attr('cursor', 'ew-resize');\n        // Update slider selected area\n        if (zoombarType === ZoomBarTypes.SLIDER_VIEW) {\n            this.updateSliderSelectedArea(selection);\n        }\n        this.updateClipPath(svg, this.clipId, selection[0], 0, selection[1] - selection[0], handleHeight);\n    };\n    ZoomBar.prototype.updateSliderSelectedArea = function (selection) {\n        var zoombarType = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n        var zoombarHeight = Configuration.zoomBar.height[zoombarType];\n        var width = DOMUtils.getSVGElementSize(this.parent, {\n            useAttrs: true,\n        }).width;\n        // get axes margins\n        var axesLeftMargin = 0;\n        var axesMargins = this.model.get('axesMargins');\n        if (axesMargins && axesMargins.left) {\n            axesLeftMargin = axesMargins.left;\n        }\n        var svg = this.getContainerSVG();\n        var container = svg.select('svg.zoom-container');\n        // Draw zoombar background line\n        DOMUtils.appendOrSelect(container, 'rect.zoom-slider-selected-area')\n            .attr('x', selection[0])\n            .attr('y', zoombarHeight / 2 - 1)\n            .attr('width', selection[1] - selection[0])\n            .attr('height', 2);\n    };\n    ZoomBar.prototype.renderZoomBarArea = function (container, querySelector, data, clipId) {\n        var cartesianScales = this.services.cartesianScales;\n        var mainXAxisPosition = cartesianScales.getMainXAxisPosition();\n        var mainYAxisPosition = cartesianScales.getMainYAxisPosition();\n        var mainXScaleType = cartesianScales.getMainXScaleType();\n        var mainYScaleType = cartesianScales.getMainYScaleType();\n        var accessorFunction = function (scale, scaleType, axisPosition) {\n            return function (d, i) {\n                return cartesianScales.getValueFromScale(scale, scaleType, axisPosition, d, i);\n            };\n        };\n        var xAccessor = accessorFunction(this.xScale, mainXScaleType, mainXAxisPosition);\n        var yAccessor = accessorFunction(this.yScale, mainYScaleType, mainYAxisPosition);\n        var zoombarType = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n        var zoombarHeight = Configuration.zoomBar.height[zoombarType];\n        var areaGenerator = area()\n            .x(function (d, i) { return xAccessor(d, i); })\n            .y0(zoombarHeight)\n            .y1(function (d, i) { return zoombarHeight - yAccessor(d, i); });\n        var areaGraph = DOMUtils.appendOrSelect(container, querySelector)\n            .datum(data)\n            .attr('d', areaGenerator);\n        if (clipId) {\n            areaGraph.attr('clip-path', \"url(#\" + clipId + \")\");\n        }\n    };\n    ZoomBar.prototype.updateClipPath = function (svg, clipId, x, y, width, height) {\n        var zoomBarClipPath = DOMUtils.appendOrSelect(svg, \"clipPath\").attr('id', clipId);\n        DOMUtils.appendOrSelect(zoomBarClipPath, 'rect')\n            .attr('x', x)\n            .attr('y', y)\n            .attr('width', width)\n            .attr('height', height);\n    };\n    // assume the domains in data are already sorted\n    ZoomBar.prototype.compensateDataForDefaultDomain = function (data, defaultDomain) {\n        if (!data || data.length < 2) {\n            return;\n        }\n        var zoomBarData = Tools.clone(data);\n        var domainIdentifier = this.services.cartesianScales.getDomainIdentifier();\n        var rangeIdentifier = this.services.cartesianScales.getRangeIdentifier();\n        // if min domain is extended\n        if (Number(defaultDomain[0]) < Number(zoomBarData[0][domainIdentifier])) {\n            var newDatum = {};\n            newDatum[domainIdentifier] = defaultDomain[0];\n            newDatum[rangeIdentifier] = 0;\n            zoomBarData.unshift(newDatum);\n        }\n        // if max domain is extended\n        if (Number(defaultDomain[1]) >\n            Number(zoomBarData[zoomBarData.length - 1][domainIdentifier])) {\n            var newDatum = {};\n            newDatum[domainIdentifier] = defaultDomain[1];\n            newDatum[rangeIdentifier] = 0;\n            zoomBarData.push(newDatum);\n        }\n        return zoomBarData;\n    };\n    ZoomBar.prototype.renderZoomBarBaseline = function (container, startX, endX, skeletonClass) {\n        if (skeletonClass === void 0) { skeletonClass = false; }\n        var zoombarType = Tools.getProperty(this.model.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n        var zoombarHeight = Configuration.zoomBar.height[zoombarType];\n        var baselineGenerator = line()([\n            [startX, zoombarHeight],\n            [endX, zoombarHeight],\n        ]);\n        DOMUtils.appendOrSelect(container, 'path.zoom-bg-baseline')\n            .attr('d', baselineGenerator)\n            .classed('zoom-bg-baseline-skeleton', skeletonClass);\n    };\n    ZoomBar.prototype.renderSkeleton = function (container, startX, endX) {\n        // need to clear current zoom bar area\n        this.renderZoomBarArea(container, 'path.zoom-graph-area-unselected', [], null);\n        this.renderZoomBarArea(container, 'path.zoom-graph-area', [], this.clipId);\n        // remove brush listener\n        this.brush.on('start brush end', null);\n        // clear d3 brush\n        DOMUtils.appendOrSelect(this.getContainerSVG(), this.brushSelector).html(null);\n        // re-render baseline because no axis labels in skeleton so the baseline length needs to change\n        var zoombarType = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'type');\n        if (zoombarType === ZoomBarTypes.GRAPH_VIEW) {\n            this.renderZoomBarBaseline(container, startX, endX, true);\n        }\n    };\n    ZoomBar.prototype.destroy = function () {\n        this.brush.on('start brush end', null); // remove event listener\n        this.services.events.removeEventListener(Events.ZoomBar.UPDATE, this.render.bind(this));\n    };\n    return ZoomBar;\n}(Component));\nexport { ZoomBar };\n//# sourceMappingURL=../../../src/components/axes/zoom-bar.js.map"]},"metadata":{},"sourceType":"module"}