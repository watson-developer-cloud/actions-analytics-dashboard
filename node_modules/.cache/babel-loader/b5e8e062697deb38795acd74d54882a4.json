{"ast":null,"code":"import _slicedToArray from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/src/components/Graph/Graph.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { LineChart } from \"@carbon/charts-react\";\nimport { Checkbox } from \"carbon-components-react\";\nimport './graph.scss';\nimport \"@carbon/charts/styles.css\";\nimport moment from 'moment';\nimport config from '../../config';\nimport { mergePromptCountsByDate } from \"../../utils\";\n\nvar Graph = /*#__PURE__*/function (_React$Component) {\n  _inherits(Graph, _React$Component);\n\n  var _super = _createSuper(Graph);\n\n  function Graph(props) {\n    _classCallCheck(this, Graph);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(Graph, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"graph-panel\",\n        style: {\n          visibility: !this.props.statsLoaded || this.props.data.length > 0 ? \"visible\" : \"hidden\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 14\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"panel-title\",\n        style: {\n          marginBottom: this.props.type == \"Prompt success rate\" ? \"0\" : \"16px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }\n      }, this.props.type + \" over time\", \" \"), /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: \"bx--fieldset\",\n        style: {\n          visibility: this.props.type == \"Engagement\" && this.props.data.length > 0 ? \"visible\" : \"hidden\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        labelText: \"Show active users\",\n        checked: this.props.showActiveUsers,\n        id: \"activeUsersCB\",\n        onChange: function onChange(checked) {\n          _this.props.dispatch({\n            type: config.UPDATE,\n            update: {\n              engagement_showActiveUsers: checked\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Checkbox, {\n        labelText: \"Show conversations\",\n        checked: this.props.showConversations,\n        id: \"conversationsCB\",\n        onChange: function onChange(checked) {\n          _this.props.dispatch({\n            type: config.UPDATE,\n            update: {\n              engagement_showConversations: checked\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Checkbox, {\n        labelText: \"Show requests\",\n        checked: this.props.showRequests,\n        id: \"requestsCB\",\n        onChange: function onChange(checked) {\n          _this.props.dispatch({\n            type: config.UPDATE,\n            update: {\n              engagement_showRequests: checked\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chartWrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(LineChart, {\n        data: this.props.data,\n        options: this.props.options,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return Graph;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownState) {\n  var props = {\n    type: ownState.type,\n    showActiveUsers: state.engagement_showActiveUsers,\n    showConversations: state.engagement_showConversations,\n    showRequests: state.engagement_showRequests,\n    data: [],\n    options: {\n      axes: {\n        bottom: {\n          title: \"Date\",\n          mapsTo: \"date\",\n          scaleType: \"time\"\n        },\n        left: {\n          mapsTo: \"value\",\n          title: \"Loading\",\n          scaleType: \"linear\"\n        }\n      },\n      data: {\n        loading: true\n      },\n      legend: {\n        enabled: ownState.type === \"Prompt success rate\",\n        truncation: {\n          type: \"none\"\n        },\n        position: \"top\"\n      },\n      height: \"400px\"\n    }\n  };\n\n  if (state.statsLoaded) {\n    props.options = {\n      axes: {\n        bottom: {\n          title: \"Date\",\n          mapsTo: \"date\",\n          scaleType: \"time\"\n        },\n        left: {\n          title: props.type + (ownState.type == \"Engagement\" ? \"\" : \" (%)\"),\n          mapsTo: \"value\",\n          scaleType: \"linear\"\n        }\n      },\n      data: {\n        loading: false\n      },\n      height: \"400px\",\n      legend: {\n        enabled: ownState.type === \"Prompt success rate\",\n        truncation: {\n          type: \"none\"\n        },\n        position: \"top\"\n      },\n      tooltip: {\n        showTotal: false\n      },\n      color: {\n        scale: {\n          \"Requests\": \"#9C74F7\",\n          \"Active Users\": \"#38807E\",\n          \"Conversations\": \"#DA5E93\",\n          \"Recognized (%)\": \"#DA5E93\",\n          \"Contained (%)\": \"#DA5E93\"\n        }\n      }\n    }; // if (props.type === \"Engagement\")\n    //     props.data = loadEngagementData(state)\n    // else if (props.type === \"Recognition\")\n    //     props.data = loadRecognitionData(state)\n    // else if (props.type === \"Prompt success rate\")\n    //     props.data = loadPromptSuccessData(state)\n  }\n\n  return props;\n};\n\nvar loadEngagementData = function loadEngagementData(state) {\n  var data = [];\n  var startDate = moment(state.startDate, \"L\");\n  var endDate = moment(state.endDate, \"L\").endOf('day');\n\n  if (state.engagement_showActiveUsers) {\n    for (var i = 0; i < Object.keys(state.uniqueUsers).length; i++) {\n      var date = Object.keys(state.uniqueUsers)[i];\n\n      if (moment(date, \"L\").isBetween(startDate, endDate, \"day\", \"[]\")) {\n        data.push({\n          date: moment(date, \"L\").toISOString(),\n          value: state.uniqueUsers[date].count,\n          group: \"Active Users\"\n        });\n      }\n    }\n  }\n\n  if (state.engagement_showConversations) {\n    for (var _i = 0; _i < Object.keys(state.uniqueSessions).length; _i++) {\n      var _date = Object.keys(state.uniqueSessions)[_i];\n\n      if (moment(_date, \"L\").isBetween(startDate, endDate, \"day\", \"[]\")) {\n        data.push({\n          date: moment(_date, \"L\").toISOString(),\n          value: state.uniqueSessions[_date],\n          group: \"Conversations\"\n        });\n      }\n    }\n  }\n\n  if (state.engagement_showRequests) {\n    for (var _i2 = 0; _i2 < Object.keys(state.requestCounts).length; _i2++) {\n      var _date2 = Object.keys(state.requestCounts)[_i2];\n\n      if (moment(_date2, \"L\").isBetween(startDate, endDate, \"day\", \"[]\")) {\n        data.push({\n          date: moment(_date2, \"L\").toISOString(),\n          value: state.requestCounts[_date2],\n          group: \"Requests\"\n        });\n      }\n    }\n  }\n\n  return data;\n};\n\nvar loadRecognitionData = function loadRecognitionData(state) {\n  var data = [];\n  var startDate = moment(state.startDate, \"L\");\n  var endDate = moment(state.endDate, \"L\").endOf('day');\n\n  for (var i = 0; i < Object.keys(state.recognized).length; i++) {\n    var date = Object.keys(state.recognized)[i];\n\n    if (moment(date, \"L\").isBetween(startDate, endDate, \"day\", \"[]\")) {\n      var rec = state.recognized[date].recognized;\n      var not = state.recognized[date].notRecognized;\n      data.push({\n        date: moment(date, \"L\").toISOString(),\n        value: Math.round(100 * rec / (rec + not)),\n        group: \"Recognized (%)\"\n      });\n    }\n  }\n\n  return data;\n};\n\nvar loadPromptSuccessData = function loadPromptSuccessData(state) {\n  var data = [];\n  var startDate = moment(state.startDate, \"L\");\n  var endDate = moment(state.endDate, \"L\").endOf('day'); // For merged counts\n\n  var promptCounts = mergePromptCountsByDate(state.promptStatus);\n\n  for (var i = 0; i < Object.keys(promptCounts).length; i++) {\n    var date = Object.keys(promptCounts)[i];\n\n    if (moment(date, \"L\").isBetween(startDate, endDate, \"day\", \"[]\")) {\n      var success = promptCounts[date].success;\n      var fail = promptCounts[date].fail;\n      data.push({\n        date: moment(date, \"L\").toISOString(),\n        value: Math.round(100 * success / (success + fail)),\n        group: \"Average\"\n      });\n    }\n  } // For each separate count\n\n\n  for (var _i3 = 0; _i3 < Object.keys(state.promptStatus).length; _i3++) {\n    var key = Object.keys(state.promptStatus)[_i3];\n\n    var _key$split = key.split(\":::\"),\n        _key$split2 = _slicedToArray(_key$split, 3),\n        _date3 = _key$split2[0],\n        action = _key$split2[1],\n        step = _key$split2[2];\n\n    if (moment(_date3, \"L\").isBetween(startDate, endDate, \"day\", \"[]\")) {\n      data.push({\n        date: moment(_date3, \"L\").toISOString(),\n        value: Math.round(100 * state.promptStatus[key].success / (state.promptStatus[key].success + state.promptStatus[key].fail)),\n        group: action + \" → \" + step\n      });\n    }\n  }\n\n  return data;\n};\n\nexport default connect(mapStateToProps)(Graph);","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/src/components/Graph/Graph.js"],"names":["React","connect","LineChart","Checkbox","moment","config","mergePromptCountsByDate","Graph","props","visibility","statsLoaded","data","length","marginBottom","type","showActiveUsers","checked","dispatch","UPDATE","update","engagement_showActiveUsers","showConversations","engagement_showConversations","showRequests","engagement_showRequests","options","Component","mapStateToProps","state","ownState","axes","bottom","title","mapsTo","scaleType","left","loading","legend","enabled","truncation","position","height","tooltip","showTotal","color","scale","loadEngagementData","startDate","endDate","endOf","i","Object","keys","uniqueUsers","date","isBetween","push","toISOString","value","count","group","uniqueSessions","requestCounts","loadRecognitionData","recognized","rec","not","notRecognized","Math","round","loadPromptSuccessData","promptCounts","promptStatus","success","fail","key","split","action","step"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { LineChart } from \"@carbon/charts-react\";\nimport { Checkbox } from \"carbon-components-react\"\nimport './graph.scss';\nimport \"@carbon/charts/styles.css\";\nimport moment from 'moment';\nimport config from '../../config';\nimport { mergePromptCountsByDate } from \"../../utils\"\n\nclass Graph extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render () {\n      return <div className=\"graph-panel\" style={{ visibility: !this.props.statsLoaded || this.props.data.length > 0 ? \"visible\" : \"hidden\"}}>\n                <p className=\"panel-title\" style={{ marginBottom: this.props.type == \"Prompt success rate\" ? \"0\": \"16px\" }}>{ this.props.type + \" over time\" } </p>\n                <fieldset className=\"bx--fieldset\" style={{ visibility: this.props.type == \"Engagement\" && this.props.data.length > 0 ? \"visible\" : \"hidden\"}}>\n                    <Checkbox labelText=\"Show active users\" checked={ this.props.showActiveUsers } id=\"activeUsersCB\"\n                        onChange={ (checked) => { this.props.dispatch({type: config.UPDATE, update: {engagement_showActiveUsers: checked}}) } } />\n                    <Checkbox labelText=\"Show conversations\" checked={ this.props.showConversations } id=\"conversationsCB\"\n                        onChange={ (checked) => { this.props.dispatch({type: config.UPDATE, update: {engagement_showConversations: checked}}) } } />\n                    <Checkbox labelText=\"Show requests\" checked={ this.props.showRequests } id=\"requestsCB\"\n                        onChange={ (checked) => { this.props.dispatch({type: config.UPDATE, update: {engagement_showRequests: checked}}) } } />\n                </fieldset>\n                <div className=\"chartWrapper\">\n                    <LineChart\n                        data={this.props.data}\n                        options={this.props.options}>\n                    </LineChart>\n                </div>\n            </div>\n    }\n}\n\nconst mapStateToProps = (state, ownState) => {\n  let props = {\n      type: ownState.type,\n      showActiveUsers: state.engagement_showActiveUsers,\n      showConversations: state.engagement_showConversations,\n      showRequests: state.engagement_showRequests,\n      data: [],\n      options: {\n        axes: {\n            bottom: {\n              title: \"Date\",\n              mapsTo: \"date\",\n              scaleType: \"time\"\n            },\n            left: {\n              mapsTo: \"value\",\n              title: \"Loading\",\n              scaleType: \"linear\"\n            }\n          },\n        data: {\n            loading: true,\n        },\n        legend: { enabled: ownState.type === \"Prompt success rate\", truncation: { type: \"none\" }, position: \"top\" },\n        height: \"400px\"\n    }\n  }\n\n  if (state.statsLoaded) {\n      props.options = {\n        axes: {\n            bottom: {\n                title: \"Date\",\n                mapsTo: \"date\",\n                scaleType: \"time\"\n            },\n            left: {\n                title: props.type + (ownState.type == \"Engagement\" ? \"\" : \" (%)\"),\n                mapsTo: \"value\",\n                scaleType: \"linear\"\n            }\n        },\n        data: {\n            loading: false,\n        },\n        height: \"400px\",\n        legend: { enabled: ownState.type === \"Prompt success rate\", truncation: { type: \"none\" }, position: \"top\" },\n        tooltip: { showTotal: false },\n        color: { scale: { \"Requests\": \"#9C74F7\", \"Active Users\": \"#38807E\", \"Conversations\": \"#DA5E93\", \"Recognized (%)\": \"#DA5E93\", \"Contained (%)\": \"#DA5E93\" } }\n\n    }\n\n    // if (props.type === \"Engagement\")\n    //     props.data = loadEngagementData(state)\n    // else if (props.type === \"Recognition\")\n    //     props.data = loadRecognitionData(state)\n    // else if (props.type === \"Prompt success rate\")\n    //     props.data = loadPromptSuccessData(state)\n\n  }\n\n  return props\n}\n\nconst loadEngagementData = (state) => {\n    let data = []\n\n    let startDate = moment(state.startDate, \"L\")\n    let endDate = moment(state.endDate, \"L\").endOf('day');\n\n    if (state.engagement_showActiveUsers) {\n        for(let i = 0; i < Object.keys(state.uniqueUsers).length; i++) {\n            let date = Object.keys(state.uniqueUsers)[i]\n            \n            if (moment(date, \"L\").isBetween(startDate, endDate, \"day\", \"[]\")) {\n                data.push({\n                    date: moment(date, \"L\").toISOString(),\n                    value: state.uniqueUsers[date].count,\n                    group: \"Active Users\"\n                })\n            }\n        }\n    }\n\n    if (state.engagement_showConversations) {\n        for(let i = 0; i < Object.keys(state.uniqueSessions).length; i++) {\n            let date = Object.keys(state.uniqueSessions)[i]\n\n            if (moment(date, \"L\").isBetween(startDate, endDate, \"day\", \"[]\")) {\n                data.push({\n                    date: moment(date, \"L\").toISOString(),\n                    value: state.uniqueSessions[date],\n                    group: \"Conversations\"\n                })\n            }\n        }\n    }\n\n    if (state.engagement_showRequests) {\n        for(let i = 0; i < Object.keys(state.requestCounts).length; i++) {\n            let date = Object.keys(state.requestCounts)[i]\n            \n            if (moment(date, \"L\").isBetween(startDate, endDate, \"day\", \"[]\")) {\n                data.push({\n                    date: moment(date, \"L\").toISOString(),\n                    value: state.requestCounts[date],\n                    group: \"Requests\"\n                })\n            }\n        }\n    }\n\n    return data\n}\n\nconst loadRecognitionData = (state) => {\n    let data = []\n\n    let startDate = moment(state.startDate, \"L\")\n    let endDate = moment(state.endDate, \"L\").endOf('day');\n\n    for(let i = 0; i < Object.keys(state.recognized).length; i++) {\n        let date = Object.keys(state.recognized)[i]\n        \n        if (moment(date, \"L\").isBetween(startDate, endDate, \"day\", \"[]\")) {\n            let rec = state.recognized[date].recognized\n            let not = state.recognized[date].notRecognized\n\n            data.push({\n                date: moment(date, \"L\").toISOString(),\n                value: Math.round(100 * rec / (rec + not)),\n                group: \"Recognized (%)\"\n            })\n        }\n    }\n\n    return data\n}\n\nconst loadPromptSuccessData = (state) => {\n    let data = []\n\n    let startDate = moment(state.startDate, \"L\")\n    let endDate = moment(state.endDate, \"L\").endOf('day');\n\n    // For merged counts\n    let promptCounts = mergePromptCountsByDate(state.promptStatus)\n\n    for(let i = 0; i < Object.keys(promptCounts).length; i++) {\n        let date = Object.keys(promptCounts)[i]\n\n        if (moment(date, \"L\").isBetween(startDate, endDate, \"day\", \"[]\")) {\n            let success = promptCounts[date].success\n            let fail = promptCounts[date].fail\n\n            data.push({\n                date: moment(date, \"L\").toISOString(),\n                value: Math.round(100 * success / (success + fail)),\n                group: \"Average\"\n            })\n        }\n    }\n\n    // For each separate count\n    for(let i = 0; i < Object.keys(state.promptStatus).length; i++) {\n        let key = Object.keys(state.promptStatus)[i]\n        let [date, action, step] = key.split(\":::\")\n        \n        if (moment(date, \"L\").isBetween(startDate, endDate, \"day\", \"[]\")) {\n            data.push({\n                date: moment(date, \"L\").toISOString(),\n                value: Math.round(100 * state.promptStatus[key].success / (state.promptStatus[key].success + state.promptStatus[key].fail)),\n                group: action + \" → \" + step\n            })\n        }\n    }\n\n    return data\n}\n\nexport default connect(mapStateToProps)(Graph)"]},"metadata":{},"sourceType":"module"}