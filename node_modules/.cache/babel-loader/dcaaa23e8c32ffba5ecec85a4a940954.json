{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // Internal Imports\n\n\nimport { AxisPositions, Events, ScaleTypes } from '../interfaces';\nimport { Service } from './service';\nimport { Tools } from '../tools';\nimport * as Configuration from '../configuration'; // D3 imports\n\nimport { extent } from 'd3-array';\n\nvar Zoom =\n/** @class */\nfunction (_super) {\n  __extends(Zoom, _super);\n\n  function Zoom() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Zoom.prototype.isZoomBarEnabled = function () {\n    // CartesianScales service is only available in axis charts\n    if (!this.services.cartesianScales) {\n      return false;\n    } // @todo - need to update this if zoom bar in other position (bottom, left, right) is supported\n    // check configuration\n\n\n    if (!Tools.getProperty(this.model.getOptions(), 'zoomBar', 'top', 'enabled')) {\n      return false;\n    } // @todo - Zoom Bar only supports main axis at BOTTOM axis and time scale for now\n\n\n    this.services.cartesianScales.findDomainAndRangeAxes(); // need to do this before getMainXAxisPosition()\n\n    var mainXAxisPosition = this.services.cartesianScales.getMainXAxisPosition();\n    var mainXScaleType = Tools.getProperty(this.model.getOptions(), 'axes', mainXAxisPosition, 'scaleType');\n    return mainXAxisPosition === AxisPositions.BOTTOM && mainXScaleType === ScaleTypes.TIME;\n  }; // get display data for zoom bar\n  // basically it's sum of value grouped by time\n\n\n  Zoom.prototype.getZoomBarData = function () {\n    var customZoomBarData = this.model.getZoomBarData(); // if user already defines zoom bar data, use it\n\n    if (customZoomBarData && customZoomBarData.length > 1) {\n      return customZoomBarData;\n    } else {\n      // use displayData if not defined\n      return this.model.getDisplayData();\n    }\n  };\n\n  Zoom.prototype.getDefaultZoomBarDomain = function (zoomBarData) {\n    var allZoomBarData = zoomBarData || this.services.zoom.getZoomBarData();\n    var cartesianScales = this.services.cartesianScales;\n    var mainXAxisPosition = cartesianScales.getMainXAxisPosition();\n    var domainIdentifier = cartesianScales.getDomainIdentifier(); // default to full range with extended domain\n\n    return cartesianScales.extendsDomain(mainXAxisPosition, extent(allZoomBarData, function (d) {\n      return d[domainIdentifier];\n    }));\n  };\n\n  Zoom.prototype.handleDomainChange = function (newDomain, configs) {\n    if (configs === void 0) {\n      configs = {\n        dispatchEvent: true\n      };\n    }\n\n    this.model.set({\n      zoomDomain: newDomain\n    }, {\n      animate: false\n    });\n\n    if (configs.dispatchEvent) {\n      this.services.events.dispatchEvent(Events.ZoomDomain.CHANGE, {\n        newDomain: newDomain\n      });\n    }\n  };\n\n  Zoom.prototype.getZoomRatio = function () {\n    return Tools.getProperty(this.model.getOptions(), 'zoomBar', 'zoomRatio');\n  }; // filter out data not inside zoom domain\n  // to get better range value for axis label\n\n\n  Zoom.prototype.filterDataForRangeAxis = function (displayData, configs) {\n    var zoomDomain = this.model.get('zoomDomain');\n    var mergedConfigs = Object.assign({\n      stacked: false\n    }, // default configs\n    configs);\n    var shouldUpdateRangeAxis = Tools.getProperty(this.model.getOptions(), 'zoomBar', 'updateRangeAxis');\n\n    if (this.isZoomBarEnabled() && shouldUpdateRangeAxis && zoomDomain) {\n      var domainIdentifier_1 = mergedConfigs.stacked ? 'sharedStackKey' : this.services.cartesianScales.getDomainIdentifier();\n      var filteredData = displayData.filter(function (datum) {\n        return new Date(datum[domainIdentifier_1]) >= zoomDomain[0] && new Date(datum[domainIdentifier_1]) <= zoomDomain[1];\n      }); // if no data in zoom domain, use all data to get full range value\n      // so only return filteredData if length > 0\n\n      if (filteredData.length > 0) {\n        return filteredData;\n      }\n    } // return original data by default\n\n\n    return displayData;\n  };\n\n  Zoom.prototype.zoomIn = function (zoomRatio) {\n    if (zoomRatio === void 0) {\n      zoomRatio = this.getZoomRatio();\n    } // get current zoomDomain\n\n\n    var currentZoomDomain = this.model.get('zoomDomain');\n    var handleWidth = Configuration.zoomBar.handleWidth;\n    var xScale = this.services.cartesianScales.getMainXScale().copy();\n    xScale.domain(this.getDefaultZoomBarDomain()); // reset domain to default full domain\n    // use scale range (rather than domain) to calculate\n    // current zoom bar handle x position\n\n    var currentX0 = xScale(currentZoomDomain[0]);\n    var currentX1 = xScale(currentZoomDomain[1]); // zoom bar handles are already too close\n\n    if (currentX1 - currentX0 < handleWidth + 1) {\n      return;\n    }\n\n    var fullRange = xScale.range();\n    var gap = currentX1 - currentX0;\n    var diff = Math.min((fullRange[1] - fullRange[0]) / 2 * (zoomRatio / 2), gap / 2); // new zoom bar handle x position\n\n    var newX0 = currentX0 + diff;\n    var newX1 = currentX1 - diff; // if left handle becomes right side of right handle, just make them close to each other\n\n    if (newX0 >= newX1) {\n      newX0 = currentX0 + gap / 2 - handleWidth / 2;\n      newX1 = currentX1 - gap / 2 + handleWidth / 2;\n    }\n\n    var newDomain = [xScale.invert(newX0), xScale.invert(newX1)]; // only if zoomDomain needs update\n\n    if (currentZoomDomain[0].valueOf() !== newDomain[0].valueOf() || currentZoomDomain[1].valueOf() !== newDomain[1].valueOf()) {\n      this.handleDomainChange(newDomain);\n    }\n  };\n\n  Zoom.prototype.zoomOut = function (zoomRatio) {\n    if (zoomRatio === void 0) {\n      zoomRatio = this.getZoomRatio();\n    } // get current zoomDomain\n\n\n    var currentZoomDomain = this.model.get('zoomDomain');\n    var xScale = this.services.cartesianScales.getMainXScale().copy();\n    xScale.domain(this.getDefaultZoomBarDomain()); // reset domain to default full domain\n    // use scale range (rather than domain) to calculate\n    // current zoom bar handle x position\n\n    var currentX0 = xScale(currentZoomDomain[0]);\n    var currentX1 = xScale(currentZoomDomain[1]);\n    var fullRange = xScale.range();\n    var diff = (fullRange[1] - fullRange[0]) / 2 * (zoomRatio / 2); // new zoom bar handle x position\n    // max to full range\n\n    var newX0 = Math.max(currentX0 - diff, fullRange[0]);\n    var newX1 = Math.min(currentX1 + diff, fullRange[1]);\n    var newDomain = [xScale.invert(newX0), xScale.invert(newX1)]; // only if zoomDomain needs update\n\n    if (currentZoomDomain[0].valueOf() !== newDomain[0].valueOf() || currentZoomDomain[1].valueOf() !== newDomain[1].valueOf()) {\n      this.handleDomainChange(newDomain);\n    }\n  };\n\n  Zoom.prototype.resetZoomDomain = function () {\n    // get current zoomDomain\n    var currentZoomDomain = this.model.get('zoomDomain');\n    var newDomain = this.getDefaultZoomBarDomain(); // only if zoomDomain needs update\n\n    if (currentZoomDomain[0].valueOf() !== newDomain[0].valueOf() || currentZoomDomain[1].valueOf() !== newDomain[1].valueOf()) {\n      this.handleDomainChange(newDomain);\n    }\n  }; // check if current zoom domain is already the min zoom domain\n  // when toolbar is rendered, we don't render chart yet\n  // don't depend on scale range\n\n\n  Zoom.prototype.isMinZoomDomain = function () {\n    // get current zoomDomain\n    var currentZoomDomain = this.model.get('zoomDomain'); // assume the max zoom domain is the default zoom bar domain\n\n    var maxZoomDomain = this.getDefaultZoomBarDomain();\n\n    if (!currentZoomDomain || !maxZoomDomain) {\n      return false;\n    }\n\n    var currentZoomDomainPeriod = currentZoomDomain[1].valueOf() - currentZoomDomain[0].valueOf();\n    var maxZoomDomainPeriod = maxZoomDomain[1].valueOf() - maxZoomDomain[0].valueOf();\n    var minZoomRatio = Tools.getProperty(this.model.getOptions(), 'zoomBar', 'minZoomRatio'); // if current zoom domain is already smaller than minZoomRatio\n\n    if (currentZoomDomainPeriod / maxZoomDomainPeriod < minZoomRatio) {\n      return true;\n    }\n\n    return false;\n  }; // check if current zoom domain is already the max zoom domain\n\n\n  Zoom.prototype.isMaxZoomDomain = function () {\n    // get current zoom domain\n    var currentZoomDomain = this.model.get('zoomDomain'); // assume the max zoom domain is the default zoom bar domain\n\n    var maxZoomDomain = this.getDefaultZoomBarDomain();\n\n    if (currentZoomDomain && maxZoomDomain && currentZoomDomain[0].valueOf() === maxZoomDomain[0].valueOf() && currentZoomDomain[1].valueOf() === maxZoomDomain[1].valueOf()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  Zoom.prototype.isEmptyState = function () {\n    return this.getZoomBarData().length === 0;\n  };\n\n  Zoom.prototype.isZoomBarLoading = function (position) {\n    return Tools.getProperty(this.model.getOptions(), 'zoomBar', position, 'loading');\n  };\n\n  Zoom.prototype.isZoomBarLocked = function (position) {\n    return Tools.getProperty(this.model.getOptions(), 'zoomBar', position, 'locked');\n  };\n\n  return Zoom;\n}(Service);\n\nexport { Zoom };","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/@carbon/charts/services/zoom.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","AxisPositions","Events","ScaleTypes","Service","Tools","Configuration","extent","Zoom","_super","apply","arguments","isZoomBarEnabled","services","cartesianScales","getProperty","model","getOptions","findDomainAndRangeAxes","mainXAxisPosition","getMainXAxisPosition","mainXScaleType","BOTTOM","TIME","getZoomBarData","customZoomBarData","length","getDisplayData","getDefaultZoomBarDomain","zoomBarData","allZoomBarData","zoom","domainIdentifier","getDomainIdentifier","extendsDomain","handleDomainChange","newDomain","configs","dispatchEvent","set","zoomDomain","animate","events","ZoomDomain","CHANGE","getZoomRatio","filterDataForRangeAxis","displayData","get","mergedConfigs","assign","stacked","shouldUpdateRangeAxis","domainIdentifier_1","filteredData","filter","datum","Date","zoomIn","zoomRatio","currentZoomDomain","handleWidth","zoomBar","xScale","getMainXScale","copy","domain","currentX0","currentX1","fullRange","range","gap","diff","Math","min","newX0","newX1","invert","valueOf","zoomOut","max","resetZoomDomain","isMinZoomDomain","maxZoomDomain","currentZoomDomainPeriod","maxZoomDomainPeriod","minZoomRatio","isMaxZoomDomain","isEmptyState","isZoomBarLoading","position","isZoomBarLocked"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// Internal Imports\nimport { AxisPositions, Events, ScaleTypes } from '../interfaces';\nimport { Service } from './service';\nimport { Tools } from '../tools';\nimport * as Configuration from '../configuration';\n// D3 imports\nimport { extent } from 'd3-array';\nvar Zoom = /** @class */ (function (_super) {\n    __extends(Zoom, _super);\n    function Zoom() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Zoom.prototype.isZoomBarEnabled = function () {\n        // CartesianScales service is only available in axis charts\n        if (!this.services.cartesianScales) {\n            return false;\n        }\n        // @todo - need to update this if zoom bar in other position (bottom, left, right) is supported\n        // check configuration\n        if (!Tools.getProperty(this.model.getOptions(), 'zoomBar', 'top', 'enabled')) {\n            return false;\n        }\n        // @todo - Zoom Bar only supports main axis at BOTTOM axis and time scale for now\n        this.services.cartesianScales.findDomainAndRangeAxes(); // need to do this before getMainXAxisPosition()\n        var mainXAxisPosition = this.services.cartesianScales.getMainXAxisPosition();\n        var mainXScaleType = Tools.getProperty(this.model.getOptions(), 'axes', mainXAxisPosition, 'scaleType');\n        return (mainXAxisPosition === AxisPositions.BOTTOM &&\n            mainXScaleType === ScaleTypes.TIME);\n    };\n    // get display data for zoom bar\n    // basically it's sum of value grouped by time\n    Zoom.prototype.getZoomBarData = function () {\n        var customZoomBarData = this.model.getZoomBarData();\n        // if user already defines zoom bar data, use it\n        if (customZoomBarData && customZoomBarData.length > 1) {\n            return customZoomBarData;\n        }\n        else {\n            // use displayData if not defined\n            return this.model.getDisplayData();\n        }\n    };\n    Zoom.prototype.getDefaultZoomBarDomain = function (zoomBarData) {\n        var allZoomBarData = zoomBarData || this.services.zoom.getZoomBarData();\n        var cartesianScales = this.services.cartesianScales;\n        var mainXAxisPosition = cartesianScales.getMainXAxisPosition();\n        var domainIdentifier = cartesianScales.getDomainIdentifier();\n        // default to full range with extended domain\n        return cartesianScales.extendsDomain(mainXAxisPosition, extent(allZoomBarData, function (d) { return d[domainIdentifier]; }));\n    };\n    Zoom.prototype.handleDomainChange = function (newDomain, configs) {\n        if (configs === void 0) { configs = { dispatchEvent: true }; }\n        this.model.set({ zoomDomain: newDomain }, { animate: false });\n        if (configs.dispatchEvent) {\n            this.services.events.dispatchEvent(Events.ZoomDomain.CHANGE, {\n                newDomain: newDomain,\n            });\n        }\n    };\n    Zoom.prototype.getZoomRatio = function () {\n        return Tools.getProperty(this.model.getOptions(), 'zoomBar', 'zoomRatio');\n    };\n    // filter out data not inside zoom domain\n    // to get better range value for axis label\n    Zoom.prototype.filterDataForRangeAxis = function (displayData, configs) {\n        var zoomDomain = this.model.get('zoomDomain');\n        var mergedConfigs = Object.assign({ stacked: false }, // default configs\n        configs);\n        var shouldUpdateRangeAxis = Tools.getProperty(this.model.getOptions(), 'zoomBar', 'updateRangeAxis');\n        if (this.isZoomBarEnabled() && shouldUpdateRangeAxis && zoomDomain) {\n            var domainIdentifier_1 = mergedConfigs.stacked\n                ? 'sharedStackKey'\n                : this.services.cartesianScales.getDomainIdentifier();\n            var filteredData = displayData.filter(function (datum) {\n                return new Date(datum[domainIdentifier_1]) >= zoomDomain[0] &&\n                    new Date(datum[domainIdentifier_1]) <= zoomDomain[1];\n            });\n            // if no data in zoom domain, use all data to get full range value\n            // so only return filteredData if length > 0\n            if (filteredData.length > 0) {\n                return filteredData;\n            }\n        }\n        // return original data by default\n        return displayData;\n    };\n    Zoom.prototype.zoomIn = function (zoomRatio) {\n        if (zoomRatio === void 0) { zoomRatio = this.getZoomRatio(); }\n        // get current zoomDomain\n        var currentZoomDomain = this.model.get('zoomDomain');\n        var handleWidth = Configuration.zoomBar.handleWidth;\n        var xScale = this.services.cartesianScales.getMainXScale().copy();\n        xScale.domain(this.getDefaultZoomBarDomain()); // reset domain to default full domain\n        // use scale range (rather than domain) to calculate\n        // current zoom bar handle x position\n        var currentX0 = xScale(currentZoomDomain[0]);\n        var currentX1 = xScale(currentZoomDomain[1]);\n        // zoom bar handles are already too close\n        if (currentX1 - currentX0 < handleWidth + 1) {\n            return;\n        }\n        var fullRange = xScale.range();\n        var gap = currentX1 - currentX0;\n        var diff = Math.min(((fullRange[1] - fullRange[0]) / 2) * (zoomRatio / 2), gap / 2);\n        // new zoom bar handle x position\n        var newX0 = currentX0 + diff;\n        var newX1 = currentX1 - diff;\n        // if left handle becomes right side of right handle, just make them close to each other\n        if (newX0 >= newX1) {\n            newX0 = currentX0 + gap / 2 - handleWidth / 2;\n            newX1 = currentX1 - gap / 2 + handleWidth / 2;\n        }\n        var newDomain = [xScale.invert(newX0), xScale.invert(newX1)];\n        // only if zoomDomain needs update\n        if (currentZoomDomain[0].valueOf() !== newDomain[0].valueOf() ||\n            currentZoomDomain[1].valueOf() !== newDomain[1].valueOf()) {\n            this.handleDomainChange(newDomain);\n        }\n    };\n    Zoom.prototype.zoomOut = function (zoomRatio) {\n        if (zoomRatio === void 0) { zoomRatio = this.getZoomRatio(); }\n        // get current zoomDomain\n        var currentZoomDomain = this.model.get('zoomDomain');\n        var xScale = this.services.cartesianScales.getMainXScale().copy();\n        xScale.domain(this.getDefaultZoomBarDomain()); // reset domain to default full domain\n        // use scale range (rather than domain) to calculate\n        // current zoom bar handle x position\n        var currentX0 = xScale(currentZoomDomain[0]);\n        var currentX1 = xScale(currentZoomDomain[1]);\n        var fullRange = xScale.range();\n        var diff = ((fullRange[1] - fullRange[0]) / 2) * (zoomRatio / 2);\n        // new zoom bar handle x position\n        // max to full range\n        var newX0 = Math.max(currentX0 - diff, fullRange[0]);\n        var newX1 = Math.min(currentX1 + diff, fullRange[1]);\n        var newDomain = [xScale.invert(newX0), xScale.invert(newX1)];\n        // only if zoomDomain needs update\n        if (currentZoomDomain[0].valueOf() !== newDomain[0].valueOf() ||\n            currentZoomDomain[1].valueOf() !== newDomain[1].valueOf()) {\n            this.handleDomainChange(newDomain);\n        }\n    };\n    Zoom.prototype.resetZoomDomain = function () {\n        // get current zoomDomain\n        var currentZoomDomain = this.model.get('zoomDomain');\n        var newDomain = this.getDefaultZoomBarDomain();\n        // only if zoomDomain needs update\n        if (currentZoomDomain[0].valueOf() !== newDomain[0].valueOf() ||\n            currentZoomDomain[1].valueOf() !== newDomain[1].valueOf()) {\n            this.handleDomainChange(newDomain);\n        }\n    };\n    // check if current zoom domain is already the min zoom domain\n    // when toolbar is rendered, we don't render chart yet\n    // don't depend on scale range\n    Zoom.prototype.isMinZoomDomain = function () {\n        // get current zoomDomain\n        var currentZoomDomain = this.model.get('zoomDomain');\n        // assume the max zoom domain is the default zoom bar domain\n        var maxZoomDomain = this.getDefaultZoomBarDomain();\n        if (!currentZoomDomain || !maxZoomDomain) {\n            return false;\n        }\n        var currentZoomDomainPeriod = currentZoomDomain[1].valueOf() - currentZoomDomain[0].valueOf();\n        var maxZoomDomainPeriod = maxZoomDomain[1].valueOf() - maxZoomDomain[0].valueOf();\n        var minZoomRatio = Tools.getProperty(this.model.getOptions(), 'zoomBar', 'minZoomRatio');\n        // if current zoom domain is already smaller than minZoomRatio\n        if (currentZoomDomainPeriod / maxZoomDomainPeriod < minZoomRatio) {\n            return true;\n        }\n        return false;\n    };\n    // check if current zoom domain is already the max zoom domain\n    Zoom.prototype.isMaxZoomDomain = function () {\n        // get current zoom domain\n        var currentZoomDomain = this.model.get('zoomDomain');\n        // assume the max zoom domain is the default zoom bar domain\n        var maxZoomDomain = this.getDefaultZoomBarDomain();\n        if (currentZoomDomain &&\n            maxZoomDomain &&\n            currentZoomDomain[0].valueOf() === maxZoomDomain[0].valueOf() &&\n            currentZoomDomain[1].valueOf() === maxZoomDomain[1].valueOf()) {\n            return true;\n        }\n        return false;\n    };\n    Zoom.prototype.isEmptyState = function () {\n        return this.getZoomBarData().length === 0;\n    };\n    Zoom.prototype.isZoomBarLoading = function (position) {\n        return Tools.getProperty(this.model.getOptions(), 'zoomBar', position, 'loading');\n    };\n    Zoom.prototype.isZoomBarLocked = function (position) {\n        return Tools.getProperty(this.model.getOptions(), 'zoomBar', position, 'locked');\n    };\n    return Zoom;\n}(Service));\nexport { Zoom };\n//# sourceMappingURL=../../src/services/zoom.js.map"]},"metadata":{},"sourceType":"module"}