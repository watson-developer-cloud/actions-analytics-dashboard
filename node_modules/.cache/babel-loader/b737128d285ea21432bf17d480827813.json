{"ast":null,"code":"import _objectSpread from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _getCookie,\n    _jsxFileName = \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/src/index.js\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\nimport 'core-js/modules/es7.array.includes';\nimport 'core-js/modules/es6.array.fill';\nimport 'core-js/modules/es6.string.includes';\nimport 'core-js/modules/es6.string.trim';\nimport 'core-js/modules/es7.object.values';\nimport AssistantManager from './AssistantManager';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport config from './config';\nimport moment from 'moment';\nimport { getCookie, setCookie } from \"./cookies\";\nvar assistantManager;\nvar initialState = {\n  pageTitle: \"Analytics Overview\",\n  activePage: \"Overview\",\n  assistants: [],\n  assistantsLoaded: false,\n  selectedAssistant: (_getCookie = getCookie(\"selectedAssistant\")) !== null && _getCookie !== void 0 ? _getCookie : \"\",\n  statsLoaded: false,\n  loadingStats: true,\n  uniqueUsers: {},\n  uniqueSessions: {},\n  requestCounts: {},\n  engagement_showActiveUsers: true,\n  engagement_showConversations: true,\n  engagement_showRequests: true,\n  recognized: {},\n  notRecognizedMessages: [],\n  intentCounts: {},\n  promptStatus: {},\n  failedPromptMessages: [],\n  unusedPrompts: [],\n  lastUpdated: \"-:--\",\n  minDate: moment().format(\"L\"),\n  maxDate: moment().format(\"L\"),\n  startDate: moment().format(\"L\"),\n  endDate: moment().format(\"L\")\n};\nconsole.log(\"DOC: \" + document.cookie);\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(\"Reducer recieved action: \" + JSON.stringify(action));\n\n  switch (action.type) {\n    case config.ASSISTANT_LOADED:\n      // Load stats for first assistant\n      assistantManager.loadStats(action.assistants[0]);\n      return Object.assign({}, state, {\n        loadingStats: true,\n        assistants: action.assistants,\n        assistantsLoaded: true,\n        selectedAssistant: state.selectedAssistant || action.assistants[0]\n      });\n\n    case config.STATS_LOADED:\n      var update = _objectSpread({}, action.stats);\n\n      update.statsLoaded = true;\n      update.loadingStats = false;\n      var dates = Object.keys(action.stats.requestCounts).map(function (str) {\n        return moment(str, \"L\");\n      });\n      update.minDate = moment.min(dates).format(\"L\");\n      update.maxDate = moment.max(dates).format(\"L\");\n      update.lastUpdated = moment().format('h:mm A');\n      update.startDate = update.minDate;\n      update.endDate = update.maxDate;\n      return Object.assign({}, state, update);\n\n    case config.ASSISTANT_SELECTED:\n      // Load stats for selected assistant\n      assistantManager.loadStats(action.assistant);\n      cookies.set(\"selectedAssistant\", action.assistant);\n      return Object.assign({}, state, {\n        selectedAssistant: action.assistant,\n        loadingStats: true,\n        statsLoaded: false\n      });\n\n    case config.REFRESH_STATS:\n      if (state.selectedAssistant && !state.loadingStats) {\n        assistantManager.loadStats(state.selectedAssistant);\n        return Object.assign({}, state, {\n          loadingStats: true\n        });\n      } else {\n        return state;\n      }\n\n    case config.DATES_CHANGED:\n      return Object.assign({}, state, {\n        startDate: action.startDate,\n        endDate: action.endDate\n      });\n\n    case config.UPDATE:\n      return Object.assign({}, state, action.update);\n\n    default:\n      return state;\n  }\n}\n\nvar store = createStore(reducer);\nassistantManager = new AssistantManager(store);\nassistantManager.loadAssistants();\nReactDOM.render( /*#__PURE__*/React.createElement(Router, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 17\n  }\n}, /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 25\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 49\n  }\n}))), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","HashRouter","Router","AssistantManager","createStore","Provider","config","moment","getCookie","setCookie","assistantManager","initialState","pageTitle","activePage","assistants","assistantsLoaded","selectedAssistant","statsLoaded","loadingStats","uniqueUsers","uniqueSessions","requestCounts","engagement_showActiveUsers","engagement_showConversations","engagement_showRequests","recognized","notRecognizedMessages","intentCounts","promptStatus","failedPromptMessages","unusedPrompts","lastUpdated","minDate","format","maxDate","startDate","endDate","console","log","document","cookie","reducer","state","action","JSON","stringify","type","ASSISTANT_LOADED","loadStats","Object","assign","STATS_LOADED","update","stats","dates","keys","map","str","min","max","ASSISTANT_SELECTED","assistant","cookies","set","REFRESH_STATS","DATES_CHANGED","UPDATE","store","loadAssistants","render","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\nimport 'core-js/modules/es7.array.includes';\nimport 'core-js/modules/es6.array.fill';\nimport 'core-js/modules/es6.string.includes';\nimport 'core-js/modules/es6.string.trim';\nimport 'core-js/modules/es7.object.values';\nimport AssistantManager from './AssistantManager';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport config from './config';\nimport moment from 'moment';\nimport { getCookie, setCookie } from \"./cookies\"\n\nlet assistantManager;\n\nconst initialState = {\n    pageTitle: \"Analytics Overview\",\n    activePage: \"Overview\",\n    assistants: [],\n    assistantsLoaded: false,\n    selectedAssistant: getCookie(\"selectedAssistant\") ?? \"\",\n    statsLoaded: false,\n    loadingStats: true,\n    uniqueUsers: {},\n    uniqueSessions: {},\n    requestCounts: {},\n    engagement_showActiveUsers: true,\n    engagement_showConversations: true,\n    engagement_showRequests: true,\n    recognized: {},\n    notRecognizedMessages: [],\n    intentCounts: {},\n    promptStatus: {},\n    failedPromptMessages: [],\n    unusedPrompts: [],\n    lastUpdated:\"-:--\",\n    minDate: moment().format(\"L\"),\n    maxDate: moment().format(\"L\"),\n    startDate: moment().format(\"L\"),\n    endDate: moment().format(\"L\")\n}\n\nconsole.log(\"DOC: \" + document.cookie)\n\nfunction reducer(state=initialState, action) {\n    console.log(\"Reducer recieved action: \" + JSON.stringify(action))\n\n    switch(action.type) {\n        case config.ASSISTANT_LOADED:\n            // Load stats for first assistant\n            assistantManager.loadStats(action.assistants[0])\n\n            return Object.assign({}, state, {\n                loadingStats: true,\n                assistants: action.assistants,\n                assistantsLoaded: true,\n                selectedAssistant: state.selectedAssistant || action.assistants[0]\n            });\n        case config.STATS_LOADED:\n            let update = {...action.stats}\n            update.statsLoaded = true\n            update.loadingStats = false\n\n            let dates = Object.keys(action.stats.requestCounts).map(str => moment(str, \"L\"))\n            update.minDate = moment.min(dates).format(\"L\")\n            update.maxDate = moment.max(dates).format(\"L\")\n            update.lastUpdated = moment().format('h:mm A')\n\n            update.startDate = update.minDate\n            update.endDate = update.maxDate\n\n            return Object.assign({}, state, update);\n        case config.ASSISTANT_SELECTED:\n            // Load stats for selected assistant\n            assistantManager.loadStats(action.assistant)\n            cookies.set(\"selectedAssistant\", action.assistant)\n\n            return Object.assign({}, state, {\n                selectedAssistant: action.assistant,\n                loadingStats: true,\n                statsLoaded: false\n            });\n        case config.REFRESH_STATS:\n            if (state.selectedAssistant && !state.loadingStats) {\n                assistantManager.loadStats(state.selectedAssistant)\n                return Object.assign({}, state, {\n                    loadingStats: true,\n                });\n            } else {\n                return state\n            }\n        case config.DATES_CHANGED:\n            return Object.assign({}, state, {\n                startDate: action.startDate,\n                endDate: action.endDate\n            });\n        case config.UPDATE:\n            return Object.assign({}, state, action.update);\n        default:\n            return state\n    }\n}\n\nlet store = createStore(reducer)\n\nassistantManager = new AssistantManager(store)\nassistantManager.loadAssistants()\n\nReactDOM.render(<Router><Provider store={store}><App/></Provider></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}