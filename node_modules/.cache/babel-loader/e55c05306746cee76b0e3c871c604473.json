{"ast":null,"code":"import _classCallCheck from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport config from \"./config\";\n\nvar AssistantManager = /*#__PURE__*/function () {\n  function AssistantManager(store) {\n    _classCallCheck(this, AssistantManager);\n\n    this.store = store;\n  } // Get list of assistants\n\n\n  _createClass(AssistantManager, [{\n    key: \"loadAssistants\",\n    value: function loadAssistants() {\n      var _this = this;\n\n      fetch(config.baseURL + \"/assistants\").then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        // Dispatch assistants loaded event\n        _this.store.dispatch({\n          type: config.ASSISTANT_LOADED,\n          assistants: result.sort()\n        });\n      }, function (error) {\n        console.log(\"Failed to get assistants\");\n      });\n    } // Get stats for assistant named assistantName\n\n  }, {\n    key: \"loadStats\",\n    value: function loadStats(assistantName) {\n      var _this2 = this;\n\n      fetch(config.baseURL + \"/stats?assistant=\" + assistantName).then(function (res) {\n        return res.json();\n      }).then(function (stats) {\n        // Dispatch stats loaded event       \n        _this2.store.dispatch({\n          type: config.STATS_LOADED,\n          assistantName: assistantName,\n          stats: stats\n        });\n      }, function (error) {\n        console.log(\"Failed to get logs\");\n      });\n    }\n  }]);\n\n  return AssistantManager;\n}();\n\nexport default AssistantManager;","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/src/AssistantManager.js"],"names":["config","AssistantManager","store","fetch","baseURL","then","res","json","result","dispatch","type","ASSISTANT_LOADED","assistants","sort","error","console","log","assistantName","stats","STATS_LOADED"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,UAAnB;;IAEMC,gB;AACF,4BAAYC,KAAZ,EAAmB;AAAA;;AACf,SAAKA,KAAL,GAAaA,KAAb;AACH,G,CAED;;;;;qCACiB;AAAA;;AACbC,MAAAA,KAAK,CAACH,MAAM,CAACI,OAAP,GAAiB,aAAlB,CAAL,CACCC,IADD,CACM,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OADT,EAECF,IAFD,CAEM,UAACG,MAAD,EAAY;AACd;AACA,QAAA,KAAI,CAACN,KAAL,CAAWO,QAAX,CAAoB;AAChBC,UAAAA,IAAI,EAAEV,MAAM,CAACW,gBADG;AAEhBC,UAAAA,UAAU,EAAEJ,MAAM,CAACK,IAAP;AAFI,SAApB;AAKH,OATD,EASG,UAACC,KAAD,EAAW;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH,OAXD;AAYH,K,CAED;;;;8BACUC,a,EAAe;AAAA;;AACrBd,MAAAA,KAAK,CAACH,MAAM,CAACI,OAAP,GAAiB,mBAAjB,GAAuCa,aAAxC,CAAL,CACCZ,IADD,CACM,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OADT,EAECF,IAFD,CAEM,UAACa,KAAD,EAAW;AACb;AACA,QAAA,MAAI,CAAChB,KAAL,CAAWO,QAAX,CAAoB;AAChBC,UAAAA,IAAI,EAAEV,MAAM,CAACmB,YADG;AAEhBF,UAAAA,aAAa,EAAEA,aAFC;AAGhBC,UAAAA,KAAK,EAAEA;AAHS,SAApB;AAMH,OAVD,EAUG,UAACJ,KAAD,EAAW;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,OAZD;AAaH;;;;;;AAIL,eAAef,gBAAf","sourcesContent":["import config from \"./config\"\n\nclass AssistantManager {\n    constructor(store) {\n        this.store = store\n    }\n\n    // Get list of assistants\n    loadAssistants() {\n        fetch(config.baseURL + \"/assistants\")\n        .then(res => res.json())\n        .then((result) => {\n            // Dispatch assistants loaded event\n            this.store.dispatch({\n                type: config.ASSISTANT_LOADED,\n                assistants: result.sort()\n            })\n\n        }, (error) => {\n            console.log(\"Failed to get assistants\")\n        })\n    }\n\n    // Get stats for assistant named assistantName\n    loadStats(assistantName) {\n        fetch(config.baseURL + \"/stats?assistant=\" + assistantName)\n        .then(res => res.json())\n        .then((stats) => {     \n            // Dispatch stats loaded event       \n            this.store.dispatch({\n                type: config.STATS_LOADED,\n                assistantName: assistantName,\n                stats: stats\n            })\n\n        }, (error) => {\n            console.log(\"Failed to get logs\")\n        })\n    }\n\n}\n\nexport default AssistantManager\n"]},"metadata":{},"sourceType":"module"}