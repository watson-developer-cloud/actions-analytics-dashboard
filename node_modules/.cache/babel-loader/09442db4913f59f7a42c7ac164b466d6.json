{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // Internal Imports\n\n\nimport { Component } from '../component';\nimport { ScaleTypes } from '../../interfaces';\nimport { DOMUtils } from '../../services'; // D3 Imports\n\nimport { brushX } from 'd3-brush';\nimport { event, mouse } from 'd3-selection';\nimport { scaleTime } from 'd3-scale'; // This class is used for handle brush events in chart\n\nvar ChartBrush =\n/** @class */\nfunction (_super) {\n  __extends(ChartBrush, _super);\n\n  function ChartBrush() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'grid-brush';\n    _this.selectionSelector = 'rect.selection'; // needs to match the class name in d3.brush\n\n    _this.frontSelectionSelector = 'rect.frontSelection'; // needs to match the class name in _grid-brush.scss\n\n    return _this;\n  }\n\n  ChartBrush.prototype.render = function (animate) {\n    var _this = this;\n\n    if (animate === void 0) {\n      animate = true;\n    }\n\n    var svg = this.parent; // use this area to display selection above all graphs\n\n    var frontSelectionArea = this.getContainerSVG();\n    var backdrop = DOMUtils.appendOrSelect(svg, 'svg.chart-grid-backdrop'); // use this area to handle d3 brush events\n\n    var brushArea = DOMUtils.appendOrSelect(backdrop, \"g.\" + this.type); // set an id for rect.selection to be referred\n\n    var d3Selection = DOMUtils.appendOrSelect(brushArea, this.selectionSelector);\n\n    var _a = DOMUtils.getSVGElementSize(backdrop, {\n      useAttrs: true\n    }),\n        width = _a.width,\n        height = _a.height;\n\n    var cartesianScales = this.services.cartesianScales;\n    var mainXScaleType = cartesianScales.getMainXScaleType();\n    var mainXScale = cartesianScales.getMainXScale();\n\n    var _b = mainXScale.range(),\n        xScaleStart = _b[0],\n        xScaleEnd = _b[1];\n\n    frontSelectionArea.attr('transform', \"translate(\" + xScaleStart + \",0)\");\n    var frontSelection = DOMUtils.appendOrSelect(frontSelectionArea, this.frontSelectionSelector);\n\n    if (mainXScale && mainXScaleType === ScaleTypes.TIME) {\n      // get current zoomDomain\n      var zoomDomain_1 = this.model.get('zoomDomain');\n\n      if (zoomDomain_1 === undefined) {\n        // default to full range with extended domain\n        zoomDomain_1 = this.services.zoom.getDefaultZoomBarDomain();\n\n        if (zoomDomain_1) {\n          this.model.set({\n            zoomDomain: zoomDomain_1\n          }, {\n            animate: false\n          });\n        }\n      }\n\n      var updateSelectionDash_1 = function updateSelectionDash_1(selection) {\n        // set end drag point to dash\n        var selectionWidth = selection[1] - selection[0];\n        var dashArray = '0,' + selectionWidth.toString(); // top (invisible)\n        // right\n\n        var dashCount = Math.floor(height / ChartBrush.DASH_LENGTH);\n        var totalRightDash = dashCount * ChartBrush.DASH_LENGTH;\n\n        for (var i = 0; i < dashCount; i++) {\n          dashArray += ',' + ChartBrush.DASH_LENGTH; // for each full length dash\n        }\n\n        dashArray += ',' + (height - totalRightDash); // for rest of the right height\n        // if dash count is even, one more \",0\" is needed to make total right dash pattern even\n\n        if (dashCount % 2 === 1) {\n          dashArray += ',0';\n        }\n\n        dashArray += ',' + selectionWidth.toString(); // bottom (invisible)\n\n        dashArray += ',' + height.toString(); // left\n\n        frontSelection.attr('stroke-dasharray', dashArray);\n      };\n\n      var brushEventHandler = function brushEventHandler() {\n        // selection range: [0, width]\n        var selection = event.selection;\n\n        if (selection === null || selection[0] === selection[1]) {\n          return;\n        } // copy the d3 selection attrs to front selection element\n\n\n        frontSelection.attr('x', d3Selection.attr('x')).attr('y', d3Selection.attr('y')).attr('width', d3Selection.attr('width')).attr('height', d3Selection.attr('height')).style('cursor', 'pointer').style('display', null);\n        updateSelectionDash_1(selection);\n      }; // assume max range is [0, width]\n\n\n      var updateZoomDomain_1 = function updateZoomDomain_1(startPoint, endPoint) {\n        // create xScale based on current zoomDomain\n        var xScale = scaleTime().range([0, width]).domain(zoomDomain_1);\n        var newDomain = [xScale.invert(startPoint), xScale.invert(endPoint)]; // if selected start time and end time are the same\n        // reset to default full range\n\n        if (newDomain[0].valueOf() === newDomain[1].valueOf()) {\n          // same as d3 behavior and zoom bar behavior: set to default full range\n          newDomain = _this.services.zoom.getDefaultZoomBarDomain();\n        } // only if zoomDomain needs update\n\n\n        if (zoomDomain_1[0].valueOf() !== newDomain[0].valueOf() || zoomDomain_1[1].valueOf() !== newDomain[1].valueOf()) {\n          _this.services.zoom.handleDomainChange(newDomain);\n        }\n      };\n\n      var brushed = function brushed() {\n        // max selection range: [0, width]\n        var selection = event.selection;\n\n        if (selection !== null) {\n          // updateZoomDomain assumes max range is [0, width]\n          updateZoomDomain_1(selection[0], selection[1]); // clear brush selection\n\n          brushArea.call(brush_1.move, null); // hide frontSelection\n\n          frontSelection.style('display', 'none');\n        }\n      }; // leave some space to display selection strokes besides axis\n\n\n      var brush_1 = brushX().extent([[0, 0], [width - 1, height]]).on('start brush end', brushEventHandler).on('end.brushed', brushed);\n      brushArea.call(brush_1);\n      var zoomRatio_1 = this.services.zoom.getZoomRatio();\n      backdrop.on('click', function () {\n        if (event.shiftKey) {\n          // clickedX range: [0, width]\n          var clickedX = mouse(brushArea.node())[0];\n          var leftPoint = clickedX - width * zoomRatio_1 / 2;\n\n          if (leftPoint < 0) {\n            leftPoint = 0;\n          }\n\n          var rightPoint = clickedX + width * zoomRatio_1 / 2;\n\n          if (rightPoint > width) {\n            rightPoint = width;\n          } // updateZoomDomain assumes max range is [0, width]\n\n\n          updateZoomDomain_1(leftPoint, rightPoint);\n        }\n      });\n    }\n  };\n\n  ChartBrush.DASH_LENGTH = 4;\n  return ChartBrush;\n}(Component);\n\nexport { ChartBrush };","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/@carbon/charts/components/axes/grid-brush.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Component","ScaleTypes","DOMUtils","brushX","event","mouse","scaleTime","ChartBrush","_super","_this","apply","arguments","type","selectionSelector","frontSelectionSelector","render","animate","svg","parent","frontSelectionArea","getContainerSVG","backdrop","appendOrSelect","brushArea","d3Selection","_a","getSVGElementSize","useAttrs","width","height","cartesianScales","services","mainXScaleType","getMainXScaleType","mainXScale","getMainXScale","_b","range","xScaleStart","xScaleEnd","attr","frontSelection","TIME","zoomDomain_1","model","get","undefined","zoom","getDefaultZoomBarDomain","set","zoomDomain","updateSelectionDash_1","selection","selectionWidth","dashArray","toString","dashCount","Math","floor","DASH_LENGTH","totalRightDash","i","brushEventHandler","style","updateZoomDomain_1","startPoint","endPoint","xScale","domain","newDomain","invert","valueOf","handleDomainChange","brushed","call","brush_1","move","extent","on","zoomRatio_1","getZoomRatio","shiftKey","clickedX","node","leftPoint","rightPoint"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// Internal Imports\nimport { Component } from '../component';\nimport { ScaleTypes } from '../../interfaces';\nimport { DOMUtils } from '../../services';\n// D3 Imports\nimport { brushX } from 'd3-brush';\nimport { event, mouse } from 'd3-selection';\nimport { scaleTime } from 'd3-scale';\n// This class is used for handle brush events in chart\nvar ChartBrush = /** @class */ (function (_super) {\n    __extends(ChartBrush, _super);\n    function ChartBrush() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'grid-brush';\n        _this.selectionSelector = 'rect.selection'; // needs to match the class name in d3.brush\n        _this.frontSelectionSelector = 'rect.frontSelection'; // needs to match the class name in _grid-brush.scss\n        return _this;\n    }\n    ChartBrush.prototype.render = function (animate) {\n        var _this = this;\n        if (animate === void 0) { animate = true; }\n        var svg = this.parent;\n        // use this area to display selection above all graphs\n        var frontSelectionArea = this.getContainerSVG();\n        var backdrop = DOMUtils.appendOrSelect(svg, 'svg.chart-grid-backdrop');\n        // use this area to handle d3 brush events\n        var brushArea = DOMUtils.appendOrSelect(backdrop, \"g.\" + this.type);\n        // set an id for rect.selection to be referred\n        var d3Selection = DOMUtils.appendOrSelect(brushArea, this.selectionSelector);\n        var _a = DOMUtils.getSVGElementSize(backdrop, {\n            useAttrs: true,\n        }), width = _a.width, height = _a.height;\n        var cartesianScales = this.services.cartesianScales;\n        var mainXScaleType = cartesianScales.getMainXScaleType();\n        var mainXScale = cartesianScales.getMainXScale();\n        var _b = mainXScale.range(), xScaleStart = _b[0], xScaleEnd = _b[1];\n        frontSelectionArea.attr('transform', \"translate(\" + xScaleStart + \",0)\");\n        var frontSelection = DOMUtils.appendOrSelect(frontSelectionArea, this.frontSelectionSelector);\n        if (mainXScale && mainXScaleType === ScaleTypes.TIME) {\n            // get current zoomDomain\n            var zoomDomain_1 = this.model.get('zoomDomain');\n            if (zoomDomain_1 === undefined) {\n                // default to full range with extended domain\n                zoomDomain_1 = this.services.zoom.getDefaultZoomBarDomain();\n                if (zoomDomain_1) {\n                    this.model.set({ zoomDomain: zoomDomain_1 }, { animate: false });\n                }\n            }\n            var updateSelectionDash_1 = function (selection) {\n                // set end drag point to dash\n                var selectionWidth = selection[1] - selection[0];\n                var dashArray = '0,' + selectionWidth.toString(); // top (invisible)\n                // right\n                var dashCount = Math.floor(height / ChartBrush.DASH_LENGTH);\n                var totalRightDash = dashCount * ChartBrush.DASH_LENGTH;\n                for (var i = 0; i < dashCount; i++) {\n                    dashArray += ',' + ChartBrush.DASH_LENGTH; // for each full length dash\n                }\n                dashArray += ',' + (height - totalRightDash); // for rest of the right height\n                // if dash count is even, one more \",0\" is needed to make total right dash pattern even\n                if (dashCount % 2 === 1) {\n                    dashArray += ',0';\n                }\n                dashArray += ',' + selectionWidth.toString(); // bottom (invisible)\n                dashArray += ',' + height.toString(); // left\n                frontSelection.attr('stroke-dasharray', dashArray);\n            };\n            var brushEventHandler = function () {\n                // selection range: [0, width]\n                var selection = event.selection;\n                if (selection === null || selection[0] === selection[1]) {\n                    return;\n                }\n                // copy the d3 selection attrs to front selection element\n                frontSelection\n                    .attr('x', d3Selection.attr('x'))\n                    .attr('y', d3Selection.attr('y'))\n                    .attr('width', d3Selection.attr('width'))\n                    .attr('height', d3Selection.attr('height'))\n                    .style('cursor', 'pointer')\n                    .style('display', null);\n                updateSelectionDash_1(selection);\n            };\n            // assume max range is [0, width]\n            var updateZoomDomain_1 = function (startPoint, endPoint) {\n                // create xScale based on current zoomDomain\n                var xScale = scaleTime().range([0, width]).domain(zoomDomain_1);\n                var newDomain = [\n                    xScale.invert(startPoint),\n                    xScale.invert(endPoint),\n                ];\n                // if selected start time and end time are the same\n                // reset to default full range\n                if (newDomain[0].valueOf() === newDomain[1].valueOf()) {\n                    // same as d3 behavior and zoom bar behavior: set to default full range\n                    newDomain = _this.services.zoom.getDefaultZoomBarDomain();\n                }\n                // only if zoomDomain needs update\n                if (zoomDomain_1[0].valueOf() !== newDomain[0].valueOf() ||\n                    zoomDomain_1[1].valueOf() !== newDomain[1].valueOf()) {\n                    _this.services.zoom.handleDomainChange(newDomain);\n                }\n            };\n            var brushed = function () {\n                // max selection range: [0, width]\n                var selection = event.selection;\n                if (selection !== null) {\n                    // updateZoomDomain assumes max range is [0, width]\n                    updateZoomDomain_1(selection[0], selection[1]);\n                    // clear brush selection\n                    brushArea.call(brush_1.move, null);\n                    // hide frontSelection\n                    frontSelection.style('display', 'none');\n                }\n            };\n            // leave some space to display selection strokes besides axis\n            var brush_1 = brushX()\n                .extent([\n                [0, 0],\n                [width - 1, height],\n            ])\n                .on('start brush end', brushEventHandler)\n                .on('end.brushed', brushed);\n            brushArea.call(brush_1);\n            var zoomRatio_1 = this.services.zoom.getZoomRatio();\n            backdrop.on('click', function () {\n                if (event.shiftKey) {\n                    // clickedX range: [0, width]\n                    var clickedX = mouse(brushArea.node())[0];\n                    var leftPoint = clickedX - (width * zoomRatio_1) / 2;\n                    if (leftPoint < 0) {\n                        leftPoint = 0;\n                    }\n                    var rightPoint = clickedX + (width * zoomRatio_1) / 2;\n                    if (rightPoint > width) {\n                        rightPoint = width;\n                    }\n                    // updateZoomDomain assumes max range is [0, width]\n                    updateZoomDomain_1(leftPoint, rightPoint);\n                }\n            });\n        }\n    };\n    ChartBrush.DASH_LENGTH = 4;\n    return ChartBrush;\n}(Component));\nexport { ChartBrush };\n//# sourceMappingURL=../../../src/components/axes/grid-brush.js.map"]},"metadata":{},"sourceType":"module"}