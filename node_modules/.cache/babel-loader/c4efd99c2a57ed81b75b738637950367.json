{"ast":null,"code":"import _objectSpread from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\nimport 'core-js/modules/es7.array.includes';\nimport 'core-js/modules/es6.array.fill';\nimport 'core-js/modules/es6.string.includes';\nimport 'core-js/modules/es6.string.trim';\nimport 'core-js/modules/es7.object.values';\nimport AssistantManager from './AssistantManager';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport config from './config';\nimport moment from 'moment';\nvar assistantManager;\nvar initialState = {\n  assistants: [],\n  assistantsLoaded: false,\n  selectedAssistant: \"\",\n  statsLoaded: false,\n  uniqueUsers: {},\n  uniqueSessions: {},\n  requestCounts: {},\n  recognized: {},\n  notRecognizedMessages: [],\n  intentCounts: {},\n  lastUpdated: \"-:--\",\n  minDate: moment().format(\"L\"),\n  maxDate: moment().format(\"L\"),\n  overviewStartDate: moment().format(\"L\"),\n  overviewEndDate: moment().format(\"L\")\n};\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(\"Reducer recieved action: \" + JSON.stringify(action));\n\n  switch (action.type) {\n    case config.ASSISTANT_LOADED:\n      // Load stats for first assistant\n      assistantManager.loadStats(action.assistants[0]);\n      return Object.assign({}, state, {\n        assistants: action.assistants,\n        assistantsLoaded: true,\n        selectedAssistant: action.assistants[0]\n      });\n\n    case config.STATS_LOADED:\n      var update = _objectSpread({}, action.stats);\n\n      update.statsLoaded = true;\n      var dates = Object.keys(action.stats.requestCounts).map(function (str) {\n        return moment(str, \"L\");\n      });\n      update.minDate = moment.min(dates).format(\"L\");\n      update.maxDate = moment.max(dates).format(\"L\");\n      update.lastUpdated = moment().format('h:mm A');\n      update.overviewStartDate = update.minDate;\n      update.overviewEndDate = update.maxDate;\n      console.log(update);\n      return Object.assign({}, state, update);\n\n    case config.ASSISTANT_SELECTED:\n      // Load stats for selected assistant\n      assistantManager.loadStats(action.assistant);\n      return Object.assign({}, state, {\n        selectedAssistant: action.assistant,\n        statsLoaded: false\n      });\n\n    case config.OVERVIEW_DATES_CHANGED:\n      return Object.assign({}, state, {\n        overviewStartDate: action.startDate,\n        overviewEndDate: action.endDate\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar store = createStore(reducer);\nassistantManager = new AssistantManager(store);\nassistantManager.loadAssistants();\nReactDOM.render( /*#__PURE__*/React.createElement(Router, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 17\n  }\n}, /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 25\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 49\n  }\n}))), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","HashRouter","Router","AssistantManager","createStore","Provider","config","moment","assistantManager","initialState","assistants","assistantsLoaded","selectedAssistant","statsLoaded","uniqueUsers","uniqueSessions","requestCounts","recognized","notRecognizedMessages","intentCounts","lastUpdated","minDate","format","maxDate","overviewStartDate","overviewEndDate","reducer","state","action","console","log","JSON","stringify","type","ASSISTANT_LOADED","loadStats","Object","assign","STATS_LOADED","update","stats","dates","keys","map","str","min","max","ASSISTANT_SELECTED","assistant","OVERVIEW_DATES_CHANGED","startDate","endDate","store","loadAssistants","render","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\nimport 'core-js/modules/es7.array.includes';\nimport 'core-js/modules/es6.array.fill';\nimport 'core-js/modules/es6.string.includes';\nimport 'core-js/modules/es6.string.trim';\nimport 'core-js/modules/es7.object.values';\nimport AssistantManager from './AssistantManager';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport config from './config';\nimport moment from 'moment';\n\nlet assistantManager;\n\nconst initialState = {\n    assistants: [],\n    assistantsLoaded: false,\n    selectedAssistant: \"\",\n    statsLoaded: false,\n    uniqueUsers: {},\n    uniqueSessions: {},\n    requestCounts: {},\n    recognized: {},\n    notRecognizedMessages: [],\n    intentCounts: {},\n    lastUpdated:\"-:--\",\n    minDate: moment().format(\"L\"),\n    maxDate: moment().format(\"L\"),\n    overviewStartDate: moment().format(\"L\"),\n    overviewEndDate: moment().format(\"L\")\n    \n\n}\n\nfunction reducer(state=initialState, action) {\n    console.log(\"Reducer recieved action: \" + JSON.stringify(action))\n\n    switch(action.type) {\n        case config.ASSISTANT_LOADED:\n            // Load stats for first assistant\n            assistantManager.loadStats(action.assistants[0])\n\n            return Object.assign({}, state, {\n                assistants: action.assistants,\n                assistantsLoaded: true,\n                selectedAssistant: action.assistants[0]\n            });\n        case config.STATS_LOADED:\n            let update = {...action.stats}\n            update.statsLoaded = true\n\n            let dates = Object.keys(action.stats.requestCounts).map(str => moment(str, \"L\"))\n            update.minDate = moment.min(dates).format(\"L\")\n            update.maxDate = moment.max(dates).format(\"L\")\n            update.lastUpdated = moment().format('h:mm A')\n\n            update.overviewStartDate = update.minDate\n            update.overviewEndDate = update.maxDate\n\n            console.log(update)\n\n            return Object.assign({}, state, update);\n        case config.ASSISTANT_SELECTED:\n            // Load stats for selected assistant\n            assistantManager.loadStats(action.assistant)\n\n            return Object.assign({}, state, {\n                selectedAssistant: action.assistant,\n                statsLoaded: false\n            });\n        case config.OVERVIEW_DATES_CHANGED:\n            return Object.assign({}, state, {\n                overviewStartDate: action.startDate,\n                overviewEndDate: action.endDate\n            });\n        default:\n            return state\n    }\n}\n\nlet store = createStore(reducer)\n\nassistantManager = new AssistantManager(store)\nassistantManager.loadAssistants()\n\nReactDOM.render(<Router><Provider store={store}><App/></Provider></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}