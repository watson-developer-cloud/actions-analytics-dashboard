{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // Internal Imports\n\n\nimport { ChartModelCartesian } from './model-cartesian-charts';\nimport * as Configuration from './configuration';\nimport { Tools } from './tools'; // D3 Imports\n\nimport { ascending, min, max, quantile } from 'd3-array';\nimport { scaleOrdinal } from 'd3-scale';\n/** The charting model layer which includes mainly the chart data and options,\n * as well as some misc. information to be shared among components */\n\nvar BoxplotChartModel =\n/** @class */\nfunction (_super) {\n  __extends(BoxplotChartModel, _super);\n\n  function BoxplotChartModel(services) {\n    return _super.call(this, services) || this;\n  }\n\n  BoxplotChartModel.prototype.getBoxQuartiles = function (d) {\n    return {\n      q_25: quantile(d, 0.25),\n      q_50: quantile(d, 0.5),\n      q_75: quantile(d, 0.75)\n    };\n  };\n\n  BoxplotChartModel.prototype.getBoxplotData = function () {\n    var options = this.getOptions();\n    var groupMapsTo = options.data.groupMapsTo;\n    var groupedData = this.getGroupedData(); // Prepare the data for the box plots\n\n    var boxplotData = [];\n\n    var _loop_1 = function _loop_1(group, data) {\n      var _a;\n\n      var rangeIdentifier = this_1.services.cartesianScales.getRangeIdentifier();\n      var values = data.map(function (d) {\n        return d[rangeIdentifier];\n      }).sort(ascending);\n      var record = (_a = {}, _a[groupMapsTo] = group, _a.counts = values, _a.quartiles = this_1.getBoxQuartiles(values), _a.outliers = null, _a.whiskers = null, _a);\n      var q1 = record.quartiles.q_25;\n      var q3 = record.quartiles.q_75;\n      var iqr = (q3 - q1) * 1.5;\n      var irq1 = q1 - iqr;\n      var irq3 = q3 + iqr;\n      var outliers = [];\n      var normalValues = [];\n\n      for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n        var value = values_1[_i];\n\n        if (value < irq1) {\n          outliers.push(value);\n        } else if (value > irq3) {\n          outliers.push(value);\n        } else {\n          normalValues.push(value);\n        }\n      }\n\n      record.outliers = outliers;\n      var minNormalValue = min(normalValues);\n      var maxNormalValue = max(normalValues);\n      record.whiskers = {\n        min: minNormalValue ? minNormalValue : min([record.quartiles.q_25, record.quartiles.q_50, record.quartiles.q_75]),\n        max: maxNormalValue ? maxNormalValue : max([record.quartiles.q_25, record.quartiles.q_50, record.quartiles.q_75])\n      };\n      boxplotData.push(record);\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, groupedData_1 = groupedData; _i < groupedData_1.length; _i++) {\n      var _a = groupedData_1[_i],\n          group = _a.name,\n          data = _a.data;\n\n      _loop_1(group, data);\n    }\n\n    return boxplotData;\n  };\n\n  BoxplotChartModel.prototype.setColorClassNames = function () {\n    // monochrome\n    var numberOfColors = 1;\n    var colorPairingOptions = Tools.getProperty(this.getOptions(), 'color', 'pairing');\n    var pairingOption = Tools.getProperty(colorPairingOptions, 'option');\n    var colorPairingCounts = Configuration.color.pairingOptions; // Use default palette if user choice is not in range\n\n    pairingOption = pairingOption <= colorPairingCounts[numberOfColors + \"-color\"] ? pairingOption : 1; // Create color classes for graph, tooltip and stroke use\n\n    var colorPairing = this.allDataGroups.map(function (dataGroup, index) {\n      return numberOfColors + \"-\" + pairingOption + \"-1\";\n    }); // Create default color classnames\n\n    this.colorClassNames = scaleOrdinal().range(colorPairing).domain(this.allDataGroups);\n  };\n\n  return BoxplotChartModel;\n}(ChartModelCartesian);\n\nexport { BoxplotChartModel };","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/@carbon/charts/model-boxplot.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","ChartModelCartesian","Configuration","Tools","ascending","min","max","quantile","scaleOrdinal","BoxplotChartModel","_super","services","call","getBoxQuartiles","q_25","q_50","q_75","getBoxplotData","options","getOptions","groupMapsTo","data","groupedData","getGroupedData","boxplotData","_loop_1","group","_a","rangeIdentifier","this_1","cartesianScales","getRangeIdentifier","values","map","sort","record","counts","quartiles","outliers","whiskers","q1","q3","iqr","irq1","irq3","normalValues","_i","values_1","length","value","push","minNormalValue","maxNormalValue","groupedData_1","name","setColorClassNames","numberOfColors","colorPairingOptions","getProperty","pairingOption","colorPairingCounts","color","pairingOptions","colorPairing","allDataGroups","dataGroup","index","colorClassNames","range","domain"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// Internal Imports\nimport { ChartModelCartesian } from './model-cartesian-charts';\nimport * as Configuration from './configuration';\nimport { Tools } from './tools';\n// D3 Imports\nimport { ascending, min, max, quantile } from 'd3-array';\nimport { scaleOrdinal } from 'd3-scale';\n/** The charting model layer which includes mainly the chart data and options,\n * as well as some misc. information to be shared among components */\nvar BoxplotChartModel = /** @class */ (function (_super) {\n    __extends(BoxplotChartModel, _super);\n    function BoxplotChartModel(services) {\n        return _super.call(this, services) || this;\n    }\n    BoxplotChartModel.prototype.getBoxQuartiles = function (d) {\n        return {\n            q_25: quantile(d, 0.25),\n            q_50: quantile(d, 0.5),\n            q_75: quantile(d, 0.75),\n        };\n    };\n    BoxplotChartModel.prototype.getBoxplotData = function () {\n        var options = this.getOptions();\n        var groupMapsTo = options.data.groupMapsTo;\n        var groupedData = this.getGroupedData();\n        // Prepare the data for the box plots\n        var boxplotData = [];\n        var _loop_1 = function (group, data) {\n            var _a;\n            var rangeIdentifier = this_1.services.cartesianScales.getRangeIdentifier();\n            var values = data.map(function (d) { return d[rangeIdentifier]; }).sort(ascending);\n            var record = (_a = {},\n                _a[groupMapsTo] = group,\n                _a.counts = values,\n                _a.quartiles = this_1.getBoxQuartiles(values),\n                _a.outliers = null,\n                _a.whiskers = null,\n                _a);\n            var q1 = record.quartiles.q_25;\n            var q3 = record.quartiles.q_75;\n            var iqr = (q3 - q1) * 1.5;\n            var irq1 = q1 - iqr;\n            var irq3 = q3 + iqr;\n            var outliers = [];\n            var normalValues = [];\n            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n                var value = values_1[_i];\n                if (value < irq1) {\n                    outliers.push(value);\n                }\n                else if (value > irq3) {\n                    outliers.push(value);\n                }\n                else {\n                    normalValues.push(value);\n                }\n            }\n            record.outliers = outliers;\n            var minNormalValue = min(normalValues);\n            var maxNormalValue = max(normalValues);\n            record.whiskers = {\n                min: minNormalValue\n                    ? minNormalValue\n                    : min([\n                        record.quartiles.q_25,\n                        record.quartiles.q_50,\n                        record.quartiles.q_75,\n                    ]),\n                max: maxNormalValue\n                    ? maxNormalValue\n                    : max([\n                        record.quartiles.q_25,\n                        record.quartiles.q_50,\n                        record.quartiles.q_75,\n                    ]),\n            };\n            boxplotData.push(record);\n        };\n        var this_1 = this;\n        for (var _i = 0, groupedData_1 = groupedData; _i < groupedData_1.length; _i++) {\n            var _a = groupedData_1[_i], group = _a.name, data = _a.data;\n            _loop_1(group, data);\n        }\n        return boxplotData;\n    };\n    BoxplotChartModel.prototype.setColorClassNames = function () {\n        // monochrome\n        var numberOfColors = 1;\n        var colorPairingOptions = Tools.getProperty(this.getOptions(), 'color', 'pairing');\n        var pairingOption = Tools.getProperty(colorPairingOptions, 'option');\n        var colorPairingCounts = Configuration.color.pairingOptions;\n        // Use default palette if user choice is not in range\n        pairingOption =\n            pairingOption <= colorPairingCounts[numberOfColors + \"-color\"]\n                ? pairingOption\n                : 1;\n        // Create color classes for graph, tooltip and stroke use\n        var colorPairing = this.allDataGroups.map(function (dataGroup, index) { return numberOfColors + \"-\" + pairingOption + \"-1\"; });\n        // Create default color classnames\n        this.colorClassNames = scaleOrdinal()\n            .range(colorPairing)\n            .domain(this.allDataGroups);\n    };\n    return BoxplotChartModel;\n}(ChartModelCartesian));\nexport { BoxplotChartModel };\n//# sourceMappingURL=../src/model-boxplot.js.map"]},"metadata":{},"sourceType":"module"}