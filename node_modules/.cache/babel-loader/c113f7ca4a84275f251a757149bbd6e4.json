{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // Internal Imports\n\n\nimport { Component } from '../component';\nimport { LayoutDirection, LayoutGrowth } from '../../interfaces/index';\nimport { Tools } from '../../tools';\nimport { DOMUtils } from '../../services'; // D3 Imports\n\nimport { select } from 'd3-selection';\nimport { hierarchy, treemap, treemapSlice, treemapDice } from 'd3-hierarchy'; // TODO - What if there is no \"growth\" object?\n\nvar LayoutComponent =\n/** @class */\nfunction (_super) {\n  __extends(LayoutComponent, _super);\n\n  function LayoutComponent(model, services, children, configs) {\n    var _this = _super.call(this, model, services, configs) || this;\n\n    _this.type = 'layout';\n    _this.configs = configs;\n    _this.children = children;\n    _this._instanceID = LayoutComponent.instanceID++; // Pass children data to the hierarchy layout\n    // And calculate sum of sizes\n\n    var directionIsReversed = _this.configs.direction === LayoutDirection.ROW_REVERSE || _this.configs.direction === LayoutDirection.COLUMN_REVERSE;\n\n    if (directionIsReversed) {\n      _this.children = _this.children.reverse();\n    }\n\n    _this.init();\n\n    return _this;\n  }\n\n  LayoutComponent.prototype.init = function () {\n    this.children.forEach(function (child) {\n      child.components.forEach(function (component) {\n        component.init();\n      });\n    });\n  };\n\n  LayoutComponent.prototype.getPreferedAndFixedSizeSum = function () {\n    var svg = this.parent;\n    var sum = 0;\n    svg.selectAll(\"svg.layout-child-\" + this._instanceID).filter(function (d) {\n      var growth = Tools.getProperty(d, 'data', 'growth', 'x');\n      return growth === LayoutGrowth.PREFERRED || growth === LayoutGrowth.FIXED;\n    }).each(function (d) {\n      sum += d.data.size;\n    });\n    return sum;\n  };\n\n  LayoutComponent.prototype.getNumOfStretchChildren = function () {\n    var svg = this.parent;\n    return svg.selectAll(\"svg.layout-child-\" + this._instanceID).filter(function (d) {\n      var growth = Tools.getProperty(d, 'data', 'growth', 'x');\n      return growth === LayoutGrowth.STRETCH;\n    }).size();\n  };\n\n  LayoutComponent.prototype.render = function (animate) {\n    var _this = this;\n\n    if (animate === void 0) {\n      animate = true;\n    } // Get parent SVG to render inside of\n\n\n    var svg = this.parent;\n\n    var _a = DOMUtils.getSVGElementSize(svg, {\n      useAttrs: true\n    }),\n        width = _a.width,\n        height = _a.height;\n\n    var root = hierarchy({\n      children: this.children\n    }).sum(function (d) {\n      return d.size;\n    }); // Grab the correct treemap tile function based on direction\n\n    var tileType = this.configs.direction === LayoutDirection.ROW || this.configs.direction === LayoutDirection.ROW_REVERSE ? treemapDice : treemapSlice; // Compute the position of all elements within the layout\n\n    treemap().tile(tileType).size([width, height])(root); // TODORF - Remove\n\n    var horizontal = this.configs.direction === LayoutDirection.ROW || this.configs.direction === LayoutDirection.ROW_REVERSE; // Add new SVGs to the DOM for each layout child\n\n    var updatedSVGs = svg.selectAll(\"svg.layout-child-\" + this._instanceID).data(root.leaves(), function (d) {\n      return d.data.id;\n    });\n    updatedSVGs.attr('width', function (d) {\n      return d.x1 - d.x0;\n    }).attr('height', function (d) {\n      return d.y1 - d.y0;\n    });\n    var enteringSVGs = updatedSVGs.enter().append('svg').attr('class', function (d) {\n      return \"layout-child layout-child-\" + _this._instanceID + \" \" + d.data.id;\n    }).attr('x', function (d) {\n      return d.x0;\n    }).attr('y', function (d) {\n      return d.y0;\n    });\n    enteringSVGs.merge(svg.selectAll(\"svg.layout-child-\" + this._instanceID)).each(function (d) {\n      var _this = this; // Set parent component for each child\n\n\n      d.data.components.forEach(function (itemComponent) {\n        itemComponent.setParent(select(_this)); // Render preffered & fixed items\n\n        var growth = Tools.getProperty(d, 'data', 'growth', 'x');\n\n        if (growth === LayoutGrowth.PREFERRED || growth === LayoutGrowth.FIXED) {\n          itemComponent.render(animate);\n        }\n      });\n    });\n    svg.selectAll(\"svg.layout-child-\" + this._instanceID).each(function (d) {\n      // Calculate preffered children sizes after internal rendering\n      var growth = Tools.getProperty(d, 'data', 'growth', 'x');\n      var matchingSVGDimensions = DOMUtils.getSVGElementSize(select(this), {\n        useBBox: true\n      });\n\n      if (growth === LayoutGrowth.PREFERRED) {\n        var matchingSVGWidth = horizontal ? matchingSVGDimensions.width : matchingSVGDimensions.height;\n        var svgWidth = horizontal ? width : height;\n        d.data.size = matchingSVGWidth / svgWidth * 100;\n      }\n    });\n    updatedSVGs.exit().remove(); // Run through stretch x-items\n\n    this.children.filter(function (child) {\n      var growth = Tools.getProperty(child, 'growth', 'x');\n      return growth === LayoutGrowth.STRETCH;\n    }).forEach(function (child, i) {\n      child.size = (100 - +_this.getPreferedAndFixedSizeSum()) / +_this.getNumOfStretchChildren();\n    }); // Pass children data to the hierarchy layout\n    // And calculate sum of sizes\n\n    root = hierarchy({\n      children: this.children\n    }).sum(function (d) {\n      return d.size;\n    }); // Compute the position of all elements within the layout\n\n    treemap().tile(tileType).size([width, height]).padding(0)(root); // Add new SVGs to the DOM for each layout child\n\n    svg.selectAll(\"svg.layout-child-\" + this._instanceID).data(root.leaves(), function (d) {\n      return d.data.id;\n    }).attr('x', function (d) {\n      return d.x0;\n    }).attr('y', function (d) {\n      return d.y0;\n    }).attr('width', function (d) {\n      return d.x1 - d.x0;\n    }).attr('height', function (d) {\n      return d.y1 - d.y0;\n    }).each(function (d, i) {\n      d.data.components.forEach(function (itemComponent) {\n        var growth = Tools.getProperty(d, 'data', 'growth', 'x');\n\n        if (growth === LayoutGrowth.STRETCH) {\n          itemComponent.render(animate);\n        }\n      });\n    });\n  }; // Pass on model to children as well\n\n\n  LayoutComponent.prototype.setModel = function (newObj) {\n    _super.prototype.setModel.call(this, newObj);\n\n    this.children.forEach(function (child) {\n      child.components.forEach(function (component) {\n        return component.setModel(newObj);\n      });\n    });\n  }; // Pass on essentials to children as well\n\n\n  LayoutComponent.prototype.setServices = function (newObj) {\n    _super.prototype.setServices.call(this, newObj);\n\n    this.children.forEach(function (child) {\n      child.components.forEach(function (component) {\n        return component.setServices(newObj);\n      });\n    });\n  };\n\n  LayoutComponent.prototype.destroy = function () {\n    this.children.forEach(function (child) {\n      child.components.forEach(function (component) {\n        return component.destroy();\n      });\n    });\n  }; // Give every layout component a distinct ID\n  // so they don't interfere when querying elements\n\n\n  LayoutComponent.instanceID = Math.floor(Math.random() * 99999999999);\n  return LayoutComponent;\n}(Component);\n\nexport { LayoutComponent };","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/@carbon/charts/components/layout/layout.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Component","LayoutDirection","LayoutGrowth","Tools","DOMUtils","select","hierarchy","treemap","treemapSlice","treemapDice","LayoutComponent","_super","model","services","children","configs","_this","call","type","_instanceID","instanceID","directionIsReversed","direction","ROW_REVERSE","COLUMN_REVERSE","reverse","init","forEach","child","components","component","getPreferedAndFixedSizeSum","svg","parent","sum","selectAll","filter","growth","getProperty","PREFERRED","FIXED","each","data","size","getNumOfStretchChildren","STRETCH","render","animate","_a","getSVGElementSize","useAttrs","width","height","root","tileType","ROW","tile","horizontal","updatedSVGs","leaves","id","attr","x1","x0","y1","y0","enteringSVGs","enter","append","merge","itemComponent","setParent","matchingSVGDimensions","useBBox","matchingSVGWidth","svgWidth","exit","remove","i","padding","setModel","newObj","setServices","destroy","Math","floor","random"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// Internal Imports\nimport { Component } from '../component';\nimport { LayoutDirection, LayoutGrowth, } from '../../interfaces/index';\nimport { Tools } from '../../tools';\nimport { DOMUtils } from '../../services';\n// D3 Imports\nimport { select } from 'd3-selection';\nimport { hierarchy, treemap, treemapSlice, treemapDice } from 'd3-hierarchy';\n// TODO - What if there is no \"growth\" object?\nvar LayoutComponent = /** @class */ (function (_super) {\n    __extends(LayoutComponent, _super);\n    function LayoutComponent(model, services, children, configs) {\n        var _this = _super.call(this, model, services, configs) || this;\n        _this.type = 'layout';\n        _this.configs = configs;\n        _this.children = children;\n        _this._instanceID = LayoutComponent.instanceID++;\n        // Pass children data to the hierarchy layout\n        // And calculate sum of sizes\n        var directionIsReversed = _this.configs.direction === LayoutDirection.ROW_REVERSE ||\n            _this.configs.direction === LayoutDirection.COLUMN_REVERSE;\n        if (directionIsReversed) {\n            _this.children = _this.children.reverse();\n        }\n        _this.init();\n        return _this;\n    }\n    LayoutComponent.prototype.init = function () {\n        this.children.forEach(function (child) {\n            child.components.forEach(function (component) {\n                component.init();\n            });\n        });\n    };\n    LayoutComponent.prototype.getPreferedAndFixedSizeSum = function () {\n        var svg = this.parent;\n        var sum = 0;\n        svg.selectAll(\"svg.layout-child-\" + this._instanceID)\n            .filter(function (d) {\n            var growth = Tools.getProperty(d, 'data', 'growth', 'x');\n            return (growth === LayoutGrowth.PREFERRED ||\n                growth === LayoutGrowth.FIXED);\n        })\n            .each(function (d) {\n            sum += d.data.size;\n        });\n        return sum;\n    };\n    LayoutComponent.prototype.getNumOfStretchChildren = function () {\n        var svg = this.parent;\n        return svg\n            .selectAll(\"svg.layout-child-\" + this._instanceID)\n            .filter(function (d) {\n            var growth = Tools.getProperty(d, 'data', 'growth', 'x');\n            return growth === LayoutGrowth.STRETCH;\n        })\n            .size();\n    };\n    LayoutComponent.prototype.render = function (animate) {\n        var _this = this;\n        if (animate === void 0) { animate = true; }\n        // Get parent SVG to render inside of\n        var svg = this.parent;\n        var _a = DOMUtils.getSVGElementSize(svg, {\n            useAttrs: true,\n        }), width = _a.width, height = _a.height;\n        var root = hierarchy({\n            children: this.children,\n        }).sum(function (d) { return d.size; });\n        // Grab the correct treemap tile function based on direction\n        var tileType = this.configs.direction === LayoutDirection.ROW ||\n            this.configs.direction === LayoutDirection.ROW_REVERSE\n            ? treemapDice\n            : treemapSlice;\n        // Compute the position of all elements within the layout\n        treemap().tile(tileType).size([width, height])(root);\n        // TODORF - Remove\n        var horizontal = this.configs.direction === LayoutDirection.ROW ||\n            this.configs.direction === LayoutDirection.ROW_REVERSE;\n        // Add new SVGs to the DOM for each layout child\n        var updatedSVGs = svg\n            .selectAll(\"svg.layout-child-\" + this._instanceID)\n            .data(root.leaves(), function (d) { return d.data.id; });\n        updatedSVGs\n            .attr('width', function (d) { return d.x1 - d.x0; })\n            .attr('height', function (d) { return d.y1 - d.y0; });\n        var enteringSVGs = updatedSVGs\n            .enter()\n            .append('svg')\n            .attr('class', function (d) {\n            return \"layout-child layout-child-\" + _this._instanceID + \" \" + d.data.id;\n        })\n            .attr('x', function (d) { return d.x0; })\n            .attr('y', function (d) { return d.y0; });\n        enteringSVGs\n            .merge(svg.selectAll(\"svg.layout-child-\" + this._instanceID))\n            .each(function (d) {\n            var _this = this;\n            // Set parent component for each child\n            d.data.components.forEach(function (itemComponent) {\n                itemComponent.setParent(select(_this));\n                // Render preffered & fixed items\n                var growth = Tools.getProperty(d, 'data', 'growth', 'x');\n                if (growth === LayoutGrowth.PREFERRED ||\n                    growth === LayoutGrowth.FIXED) {\n                    itemComponent.render(animate);\n                }\n            });\n        });\n        svg.selectAll(\"svg.layout-child-\" + this._instanceID).each(function (d) {\n            // Calculate preffered children sizes after internal rendering\n            var growth = Tools.getProperty(d, 'data', 'growth', 'x');\n            var matchingSVGDimensions = DOMUtils.getSVGElementSize(select(this), { useBBox: true });\n            if (growth === LayoutGrowth.PREFERRED) {\n                var matchingSVGWidth = horizontal\n                    ? matchingSVGDimensions.width\n                    : matchingSVGDimensions.height;\n                var svgWidth = horizontal ? width : height;\n                d.data.size = (matchingSVGWidth / svgWidth) * 100;\n            }\n        });\n        updatedSVGs.exit().remove();\n        // Run through stretch x-items\n        this.children\n            .filter(function (child) {\n            var growth = Tools.getProperty(child, 'growth', 'x');\n            return growth === LayoutGrowth.STRETCH;\n        })\n            .forEach(function (child, i) {\n            child.size =\n                (100 - +_this.getPreferedAndFixedSizeSum()) /\n                    +_this.getNumOfStretchChildren();\n        });\n        // Pass children data to the hierarchy layout\n        // And calculate sum of sizes\n        root = hierarchy({\n            children: this.children,\n        }).sum(function (d) { return d.size; });\n        // Compute the position of all elements within the layout\n        treemap().tile(tileType).size([width, height]).padding(0)(root);\n        // Add new SVGs to the DOM for each layout child\n        svg.selectAll(\"svg.layout-child-\" + this._instanceID)\n            .data(root.leaves(), function (d) { return d.data.id; })\n            .attr('x', function (d) { return d.x0; })\n            .attr('y', function (d) { return d.y0; })\n            .attr('width', function (d) { return d.x1 - d.x0; })\n            .attr('height', function (d) { return d.y1 - d.y0; })\n            .each(function (d, i) {\n            d.data.components.forEach(function (itemComponent) {\n                var growth = Tools.getProperty(d, 'data', 'growth', 'x');\n                if (growth === LayoutGrowth.STRETCH) {\n                    itemComponent.render(animate);\n                }\n            });\n        });\n    };\n    // Pass on model to children as well\n    LayoutComponent.prototype.setModel = function (newObj) {\n        _super.prototype.setModel.call(this, newObj);\n        this.children.forEach(function (child) {\n            child.components.forEach(function (component) { return component.setModel(newObj); });\n        });\n    };\n    // Pass on essentials to children as well\n    LayoutComponent.prototype.setServices = function (newObj) {\n        _super.prototype.setServices.call(this, newObj);\n        this.children.forEach(function (child) {\n            child.components.forEach(function (component) {\n                return component.setServices(newObj);\n            });\n        });\n    };\n    LayoutComponent.prototype.destroy = function () {\n        this.children.forEach(function (child) {\n            child.components.forEach(function (component) { return component.destroy(); });\n        });\n    };\n    // Give every layout component a distinct ID\n    // so they don't interfere when querying elements\n    LayoutComponent.instanceID = Math.floor(Math.random() * 99999999999);\n    return LayoutComponent;\n}(Component));\nexport { LayoutComponent };\n//# sourceMappingURL=../../../src/components/layout/layout.js.map"]},"metadata":{},"sourceType":"module"}