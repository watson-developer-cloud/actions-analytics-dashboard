{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // Internal Imports\n\n\nimport { Component } from '../component';\nimport { DOMUtils } from '../../services';\nimport { Tools } from '../../tools';\nimport { Roles, ColorClassNameTypes } from '../../interfaces'; // D3 Imports\n\nimport { scaleLinear } from 'd3-scale';\n\nvar Meter =\n/** @class */\nfunction (_super) {\n  __extends(Meter, _super);\n\n  function Meter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'meter';\n    return _this;\n  }\n\n  Meter.prototype.render = function (animate) {\n    var _this = this;\n\n    if (animate === void 0) {\n      animate = true;\n    }\n\n    var self = this;\n    var svg = this.getContainerSVG();\n    var options = this.getOptions();\n    var data = this.model.getDisplayData();\n    var status = this.model.getStatus();\n    var width = DOMUtils.getSVGElementSize(this.parent, {\n      useAttrs: true\n    }).width;\n    var groupMapsTo = options.data.groupMapsTo; // each meter has a scale for the value but no visual axis\n\n    var xScale = scaleLinear().domain([0, 100]).range([0, width]); // draw the container to hold the value\n\n    DOMUtils.appendOrSelect(svg, 'rect.container').attr('x', 0).attr('y', 0).attr('width', width).attr('height', Tools.getProperty(options, 'meter', 'height')); // value larger than 100 will display as 100% on meter chart\n\n    var maximumBarWidth = data.value >= 100; // rect with the value binded\n\n    var value = svg.selectAll('rect.value').data([data]); // if user provided a color for the bar, we dont want to attach a status class\n\n    var className = status != null && !self.model.isUserProvidedColorScaleValid() ? \"value status--\" + status : 'value'; // draw the value bar\n\n    value.enter().append('rect').classed('value', true).merge(value).attr('x', 0).attr('y', 0).attr('height', Tools.getProperty(options, 'meter', 'height')).attr('class', function (d) {\n      return _this.model.getColorClassName({\n        classNameTypes: [ColorClassNameTypes.FILL],\n        dataGroupName: d[groupMapsTo],\n        originalClassName: className\n      });\n    }).transition(this.services.transitions.getTransition('meter-bar-update', animate)).attr('width', function (d) {\n      return maximumBarWidth ? xScale(100) : xScale(d.value);\n    }).style('fill', function (d) {\n      return self.model.getFillColor(d[groupMapsTo]);\n    }) // a11y\n    .attr('role', Roles.GRAPHICS_SYMBOL).attr('aria-roledescription', 'value').attr('aria-label', function (d) {\n      return d.value;\n    }); // draw the peak\n\n    var peakValue = Tools.getProperty(options, 'meter', 'peak'); // update the peak if it is less than the value, it should be equal to the value\n\n    var updatedPeak = peakValue !== null && peakValue < data.value ? data.value : peakValue; // dont display peak if there isnt one\n\n    var peakData = updatedPeak === null || maximumBarWidth ? [] : [updatedPeak]; // if a peak is supplied within the domain, we want to render it\n\n    var peak = svg.selectAll('line.peak').data(peakData);\n    peak.enter().append('line').classed('peak', true).merge(peak).attr('y1', 0).attr('y2', Tools.getProperty(options, 'meter', 'height')).transition(this.services.transitions.getTransition('peak-line-update', animate)).attr('x1', function (d) {\n      return xScale(d);\n    }).attr('x2', function (d) {\n      return xScale(d);\n    }) // a11y\n    .attr('role', Roles.GRAPHICS_SYMBOL).attr('aria-roledescription', 'peak').attr('aria-label', function (d) {\n      return d;\n    });\n    peak.exit().remove(); // this forces the meter chart to only take up as much height as needed (if no height is provided)\n\n    this.services.domUtils.setSVGMaxHeight();\n  };\n\n  return Meter;\n}(Component);\n\nexport { Meter };","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/@carbon/charts/components/graphs/meter.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Component","DOMUtils","Tools","Roles","ColorClassNameTypes","scaleLinear","Meter","_super","_this","apply","arguments","type","render","animate","self","svg","getContainerSVG","options","getOptions","data","model","getDisplayData","status","getStatus","width","getSVGElementSize","parent","useAttrs","groupMapsTo","xScale","domain","range","appendOrSelect","attr","getProperty","maximumBarWidth","value","selectAll","className","isUserProvidedColorScaleValid","enter","append","classed","merge","getColorClassName","classNameTypes","FILL","dataGroupName","originalClassName","transition","services","transitions","getTransition","style","getFillColor","GRAPHICS_SYMBOL","peakValue","updatedPeak","peakData","peak","exit","remove","domUtils","setSVGMaxHeight"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,cAAa,GAAG,uBAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,cAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd;AAAiB,YAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAA1C;AAAwD,KAF9E;;AAGA,WAAOP,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C,C,CAaA;;;AACA,SAASI,SAAT,QAA0B,cAA1B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,KAAT,EAAgBC,mBAAhB,QAA2C,kBAA3C,C,CACA;;AACA,SAASC,WAAT,QAA4B,UAA5B;;AACA,IAAIC,KAAK;AAAG;AAAe,UAAUC,MAAV,EAAkB;AACzCrB,EAAAA,SAAS,CAACoB,KAAD,EAAQC,MAAR,CAAT;;AACA,WAASD,KAAT,GAAiB;AACb,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;;AACAF,IAAAA,KAAK,CAACG,IAAN,GAAa,OAAb;AACA,WAAOH,KAAP;AACH;;AACDF,EAAAA,KAAK,CAACR,SAAN,CAAgBc,MAAhB,GAAyB,UAAUC,OAAV,EAAmB;AACxC,QAAIL,KAAK,GAAG,IAAZ;;AACA,QAAIK,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,MAAAA,OAAO,GAAG,IAAV;AAAiB;;AAC3C,QAAIC,IAAI,GAAG,IAAX;AACA,QAAIC,GAAG,GAAG,KAAKC,eAAL,EAAV;AACA,QAAIC,OAAO,GAAG,KAAKC,UAAL,EAAd;AACA,QAAIC,IAAI,GAAG,KAAKC,KAAL,CAAWC,cAAX,EAAX;AACA,QAAIC,MAAM,GAAG,KAAKF,KAAL,CAAWG,SAAX,EAAb;AACA,QAAIC,KAAK,GAAGvB,QAAQ,CAACwB,iBAAT,CAA2B,KAAKC,MAAhC,EAAwC;AAChDC,MAAAA,QAAQ,EAAE;AADsC,KAAxC,EAETH,KAFH;AAGA,QAAII,WAAW,GAAGX,OAAO,CAACE,IAAR,CAAaS,WAA/B,CAXwC,CAYxC;;AACA,QAAIC,MAAM,GAAGxB,WAAW,GAAGyB,MAAd,CAAqB,CAAC,CAAD,EAAI,GAAJ,CAArB,EAA+BC,KAA/B,CAAqC,CAAC,CAAD,EAAIP,KAAJ,CAArC,CAAb,CAbwC,CAcxC;;AACAvB,IAAAA,QAAQ,CAAC+B,cAAT,CAAwBjB,GAAxB,EAA6B,gBAA7B,EACKkB,IADL,CACU,GADV,EACe,CADf,EAEKA,IAFL,CAEU,GAFV,EAEe,CAFf,EAGKA,IAHL,CAGU,OAHV,EAGmBT,KAHnB,EAIKS,IAJL,CAIU,QAJV,EAIoB/B,KAAK,CAACgC,WAAN,CAAkBjB,OAAlB,EAA2B,OAA3B,EAAoC,QAApC,CAJpB,EAfwC,CAoBxC;;AACA,QAAIkB,eAAe,GAAGhB,IAAI,CAACiB,KAAL,IAAc,GAApC,CArBwC,CAsBxC;;AACA,QAAIA,KAAK,GAAGrB,GAAG,CAACsB,SAAJ,CAAc,YAAd,EAA4BlB,IAA5B,CAAiC,CAACA,IAAD,CAAjC,CAAZ,CAvBwC,CAwBxC;;AACA,QAAImB,SAAS,GAAGhB,MAAM,IAAI,IAAV,IAAkB,CAACR,IAAI,CAACM,KAAL,CAAWmB,6BAAX,EAAnB,GACV,mBAAmBjB,MADT,GAEV,OAFN,CAzBwC,CA4BxC;;AACAc,IAAAA,KAAK,CACAI,KADL,GAEKC,MAFL,CAEY,MAFZ,EAGKC,OAHL,CAGa,OAHb,EAGsB,IAHtB,EAIKC,KAJL,CAIWP,KAJX,EAKKH,IALL,CAKU,GALV,EAKe,CALf,EAMKA,IANL,CAMU,GANV,EAMe,CANf,EAOKA,IAPL,CAOU,QAPV,EAOoB/B,KAAK,CAACgC,WAAN,CAAkBjB,OAAlB,EAA2B,OAA3B,EAAoC,QAApC,CAPpB,EAQKgB,IARL,CAQU,OARV,EAQmB,UAAU7C,CAAV,EAAa;AAC5B,aAAOoB,KAAK,CAACY,KAAN,CAAYwB,iBAAZ,CAA8B;AACjCC,QAAAA,cAAc,EAAE,CAACzC,mBAAmB,CAAC0C,IAArB,CADiB;AAEjCC,QAAAA,aAAa,EAAE3D,CAAC,CAACwC,WAAD,CAFiB;AAGjCoB,QAAAA,iBAAiB,EAAEV;AAHc,OAA9B,CAAP;AAKH,KAdD,EAeKW,UAfL,CAegB,KAAKC,QAAL,CAAcC,WAAd,CAA0BC,aAA1B,CAAwC,kBAAxC,EAA4DvC,OAA5D,CAfhB,EAgBKoB,IAhBL,CAgBU,OAhBV,EAgBmB,UAAU7C,CAAV,EAAa;AAC5B,aAAO+C,eAAe,GAAGN,MAAM,CAAC,GAAD,CAAT,GAAiBA,MAAM,CAACzC,CAAC,CAACgD,KAAH,CAA7C;AACH,KAlBD,EAmBKiB,KAnBL,CAmBW,MAnBX,EAmBmB,UAAUjE,CAAV,EAAa;AAAE,aAAO0B,IAAI,CAACM,KAAL,CAAWkC,YAAX,CAAwBlE,CAAC,CAACwC,WAAD,CAAzB,CAAP;AAAiD,KAnBnF,EAoBI;AApBJ,KAqBKK,IArBL,CAqBU,MArBV,EAqBkB9B,KAAK,CAACoD,eArBxB,EAsBKtB,IAtBL,CAsBU,sBAtBV,EAsBkC,OAtBlC,EAuBKA,IAvBL,CAuBU,YAvBV,EAuBwB,UAAU7C,CAAV,EAAa;AAAE,aAAOA,CAAC,CAACgD,KAAT;AAAiB,KAvBxD,EA7BwC,CAqDxC;;AACA,QAAIoB,SAAS,GAAGtD,KAAK,CAACgC,WAAN,CAAkBjB,OAAlB,EAA2B,OAA3B,EAAoC,MAApC,CAAhB,CAtDwC,CAuDxC;;AACA,QAAIwC,WAAW,GAAGD,SAAS,KAAK,IAAd,IAAsBA,SAAS,GAAGrC,IAAI,CAACiB,KAAvC,GACZjB,IAAI,CAACiB,KADO,GAEZoB,SAFN,CAxDwC,CA2DxC;;AACA,QAAIE,QAAQ,GAAGD,WAAW,KAAK,IAAhB,IAAwBtB,eAAxB,GAA0C,EAA1C,GAA+C,CAACsB,WAAD,CAA9D,CA5DwC,CA6DxC;;AACA,QAAIE,IAAI,GAAG5C,GAAG,CAACsB,SAAJ,CAAc,WAAd,EAA2BlB,IAA3B,CAAgCuC,QAAhC,CAAX;AACAC,IAAAA,IAAI,CAACnB,KAAL,GACKC,MADL,CACY,MADZ,EAEKC,OAFL,CAEa,MAFb,EAEqB,IAFrB,EAGKC,KAHL,CAGWgB,IAHX,EAIK1B,IAJL,CAIU,IAJV,EAIgB,CAJhB,EAKKA,IALL,CAKU,IALV,EAKgB/B,KAAK,CAACgC,WAAN,CAAkBjB,OAAlB,EAA2B,OAA3B,EAAoC,QAApC,CALhB,EAMKgC,UANL,CAMgB,KAAKC,QAAL,CAAcC,WAAd,CAA0BC,aAA1B,CAAwC,kBAAxC,EAA4DvC,OAA5D,CANhB,EAOKoB,IAPL,CAOU,IAPV,EAOgB,UAAU7C,CAAV,EAAa;AAAE,aAAOyC,MAAM,CAACzC,CAAD,CAAb;AAAmB,KAPlD,EAQK6C,IARL,CAQU,IARV,EAQgB,UAAU7C,CAAV,EAAa;AAAE,aAAOyC,MAAM,CAACzC,CAAD,CAAb;AAAmB,KARlD,EASI;AATJ,KAUK6C,IAVL,CAUU,MAVV,EAUkB9B,KAAK,CAACoD,eAVxB,EAWKtB,IAXL,CAWU,sBAXV,EAWkC,MAXlC,EAYKA,IAZL,CAYU,YAZV,EAYwB,UAAU7C,CAAV,EAAa;AAAE,aAAOA,CAAP;AAAW,KAZlD;AAaAuE,IAAAA,IAAI,CAACC,IAAL,GAAYC,MAAZ,GA5EwC,CA6ExC;;AACA,SAAKX,QAAL,CAAcY,QAAd,CAAuBC,eAAvB;AACH,GA/ED;;AAgFA,SAAOzD,KAAP;AACH,CAxF0B,CAwFzBN,SAxFyB,CAA3B;;AAyFA,SAASM,KAAT","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// Internal Imports\nimport { Component } from '../component';\nimport { DOMUtils } from '../../services';\nimport { Tools } from '../../tools';\nimport { Roles, ColorClassNameTypes } from '../../interfaces';\n// D3 Imports\nimport { scaleLinear } from 'd3-scale';\nvar Meter = /** @class */ (function (_super) {\n    __extends(Meter, _super);\n    function Meter() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'meter';\n        return _this;\n    }\n    Meter.prototype.render = function (animate) {\n        var _this = this;\n        if (animate === void 0) { animate = true; }\n        var self = this;\n        var svg = this.getContainerSVG();\n        var options = this.getOptions();\n        var data = this.model.getDisplayData();\n        var status = this.model.getStatus();\n        var width = DOMUtils.getSVGElementSize(this.parent, {\n            useAttrs: true,\n        }).width;\n        var groupMapsTo = options.data.groupMapsTo;\n        // each meter has a scale for the value but no visual axis\n        var xScale = scaleLinear().domain([0, 100]).range([0, width]);\n        // draw the container to hold the value\n        DOMUtils.appendOrSelect(svg, 'rect.container')\n            .attr('x', 0)\n            .attr('y', 0)\n            .attr('width', width)\n            .attr('height', Tools.getProperty(options, 'meter', 'height'));\n        // value larger than 100 will display as 100% on meter chart\n        var maximumBarWidth = data.value >= 100;\n        // rect with the value binded\n        var value = svg.selectAll('rect.value').data([data]);\n        // if user provided a color for the bar, we dont want to attach a status class\n        var className = status != null && !self.model.isUserProvidedColorScaleValid()\n            ? \"value status--\" + status\n            : 'value';\n        // draw the value bar\n        value\n            .enter()\n            .append('rect')\n            .classed('value', true)\n            .merge(value)\n            .attr('x', 0)\n            .attr('y', 0)\n            .attr('height', Tools.getProperty(options, 'meter', 'height'))\n            .attr('class', function (d) {\n            return _this.model.getColorClassName({\n                classNameTypes: [ColorClassNameTypes.FILL],\n                dataGroupName: d[groupMapsTo],\n                originalClassName: className,\n            });\n        })\n            .transition(this.services.transitions.getTransition('meter-bar-update', animate))\n            .attr('width', function (d) {\n            return maximumBarWidth ? xScale(100) : xScale(d.value);\n        })\n            .style('fill', function (d) { return self.model.getFillColor(d[groupMapsTo]); })\n            // a11y\n            .attr('role', Roles.GRAPHICS_SYMBOL)\n            .attr('aria-roledescription', 'value')\n            .attr('aria-label', function (d) { return d.value; });\n        // draw the peak\n        var peakValue = Tools.getProperty(options, 'meter', 'peak');\n        // update the peak if it is less than the value, it should be equal to the value\n        var updatedPeak = peakValue !== null && peakValue < data.value\n            ? data.value\n            : peakValue;\n        // dont display peak if there isnt one\n        var peakData = updatedPeak === null || maximumBarWidth ? [] : [updatedPeak];\n        // if a peak is supplied within the domain, we want to render it\n        var peak = svg.selectAll('line.peak').data(peakData);\n        peak.enter()\n            .append('line')\n            .classed('peak', true)\n            .merge(peak)\n            .attr('y1', 0)\n            .attr('y2', Tools.getProperty(options, 'meter', 'height'))\n            .transition(this.services.transitions.getTransition('peak-line-update', animate))\n            .attr('x1', function (d) { return xScale(d); })\n            .attr('x2', function (d) { return xScale(d); })\n            // a11y\n            .attr('role', Roles.GRAPHICS_SYMBOL)\n            .attr('aria-roledescription', 'peak')\n            .attr('aria-label', function (d) { return d; });\n        peak.exit().remove();\n        // this forces the meter chart to only take up as much height as needed (if no height is provided)\n        this.services.domUtils.setSVGMaxHeight();\n    };\n    return Meter;\n}(Component));\nexport { Meter };\n//# sourceMappingURL=../../../src/components/graphs/meter.js.map"]},"metadata":{},"sourceType":"module"}