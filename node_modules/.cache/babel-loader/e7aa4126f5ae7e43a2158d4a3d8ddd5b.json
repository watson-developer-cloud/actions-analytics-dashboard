{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // Internal Imports\n\n\nimport { ChartModel } from './model';\nimport { Tools } from './tools';\nimport { ScaleTypes, AxisPositions } from './interfaces';\n/**\n * This supports adding X and Y Cartesian[2D] zoom data to a ChartModel\n * */\n\nvar ChartModelCartesian =\n/** @class */\nfunction (_super) {\n  __extends(ChartModelCartesian, _super);\n\n  function ChartModelCartesian(services) {\n    return _super.call(this, services) || this;\n  }\n\n  ChartModelCartesian.prototype.setData = function (newData) {\n    var data;\n\n    if (newData) {\n      data = _super.prototype.setData.call(this, newData);\n\n      if (Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'enabled')) {\n        // get pre-defined zoom bar data\n        var definedZoomBarData = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'data'); // if we have zoom bar data we need to update it as well\n        // with pre-defined zoom bar data\n\n        this.setZoomBarData(definedZoomBarData);\n      }\n    }\n\n    return data;\n  };\n  /**\n   * @param zoomBarData any special zoom bar data to use instead of the model data\n   */\n\n\n  ChartModelCartesian.prototype.setZoomBarData = function (newZoomBarData) {\n    var sanitizedData = newZoomBarData ? this.sanitize(Tools.clone(newZoomBarData)) : this.getDisplayData(); // if we're not passed explicit zoom data use the model\n\n    var zoomBarNormalizedValues = sanitizedData;\n    var cartesianScales = this.services.cartesianScales;\n\n    if (sanitizedData && cartesianScales.domainAxisPosition && cartesianScales.rangeAxisPosition) {\n      var domainIdentifier_1 = cartesianScales.getDomainIdentifier();\n      var rangeIdentifier_1 = cartesianScales.getRangeIdentifier(); // get all dates (Number) in displayData\n\n      var allDates = sanitizedData.map(function (datum) {\n        return datum[domainIdentifier_1].getTime();\n      });\n      allDates = Tools.removeArrayDuplicates(allDates).sort(); // Go through all date values\n      // And get corresponding data from each dataset\n\n      zoomBarNormalizedValues = allDates.map(function (date) {\n        var sum = 0;\n        var datum = {};\n        sanitizedData.forEach(function (data) {\n          if (data[domainIdentifier_1].getTime() === date) {\n            sum += data[rangeIdentifier_1];\n          }\n        });\n        datum[domainIdentifier_1] = new Date(date);\n        datum[rangeIdentifier_1] = sum;\n        return datum;\n      });\n    }\n\n    this.set({\n      zoomBarData: zoomBarNormalizedValues\n    });\n  };\n\n  ChartModelCartesian.prototype.getZoomBarData = function () {\n    return this.get('zoomBarData');\n  };\n\n  ChartModelCartesian.prototype.sanitizeDateValues = function (data) {\n    var options = this.getOptions();\n\n    if (!options.axes) {\n      return data;\n    }\n\n    var keysToCheck = [];\n    Object.keys(AxisPositions).forEach(function (axisPositionKey) {\n      var axisPosition = AxisPositions[axisPositionKey];\n      var axisOptions = options.axes[axisPosition];\n\n      if (axisOptions && axisOptions.scaleType === ScaleTypes.TIME) {\n        var axisMapsTo = axisOptions.mapsTo;\n\n        if (axisMapsTo !== null || axisMapsTo !== undefined) {\n          keysToCheck.push(axisMapsTo);\n        }\n      }\n    });\n\n    if (keysToCheck.length > 0) {\n      // Check all datapoints and sanitize dates\n      data.forEach(function (datum) {\n        keysToCheck.forEach(function (key) {\n          if (Tools.getProperty(datum, key, 'getTime') === null) {\n            datum[key] = new Date(datum[key]);\n          }\n        });\n      });\n    }\n\n    return data;\n  };\n\n  ChartModelCartesian.prototype.sanitize = function (data) {\n    data = _super.prototype.sanitize.call(this, data);\n    data = this.sanitizeDateValues(data);\n    return data;\n  };\n\n  return ChartModelCartesian;\n}(ChartModel);\n\nexport { ChartModelCartesian };","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/@carbon/charts/model-cartesian-charts.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","ChartModel","Tools","ScaleTypes","AxisPositions","ChartModelCartesian","_super","services","call","setData","newData","data","getProperty","getOptions","TOP","definedZoomBarData","setZoomBarData","newZoomBarData","sanitizedData","sanitize","clone","getDisplayData","zoomBarNormalizedValues","cartesianScales","domainAxisPosition","rangeAxisPosition","domainIdentifier_1","getDomainIdentifier","rangeIdentifier_1","getRangeIdentifier","allDates","map","datum","getTime","removeArrayDuplicates","sort","date","sum","forEach","Date","set","zoomBarData","getZoomBarData","get","sanitizeDateValues","options","axes","keysToCheck","keys","axisPositionKey","axisPosition","axisOptions","scaleType","TIME","axisMapsTo","mapsTo","undefined","push","length","key"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// Internal Imports\nimport { ChartModel } from './model';\nimport { Tools } from './tools';\nimport { ScaleTypes, AxisPositions } from './interfaces';\n/**\n * This supports adding X and Y Cartesian[2D] zoom data to a ChartModel\n * */\nvar ChartModelCartesian = /** @class */ (function (_super) {\n    __extends(ChartModelCartesian, _super);\n    function ChartModelCartesian(services) {\n        return _super.call(this, services) || this;\n    }\n    ChartModelCartesian.prototype.setData = function (newData) {\n        var data;\n        if (newData) {\n            data = _super.prototype.setData.call(this, newData);\n            if (Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'enabled')) {\n                // get pre-defined zoom bar data\n                var definedZoomBarData = Tools.getProperty(this.getOptions(), 'zoomBar', AxisPositions.TOP, 'data');\n                // if we have zoom bar data we need to update it as well\n                // with pre-defined zoom bar data\n                this.setZoomBarData(definedZoomBarData);\n            }\n        }\n        return data;\n    };\n    /**\n     * @param zoomBarData any special zoom bar data to use instead of the model data\n     */\n    ChartModelCartesian.prototype.setZoomBarData = function (newZoomBarData) {\n        var sanitizedData = newZoomBarData\n            ? this.sanitize(Tools.clone(newZoomBarData))\n            : this.getDisplayData(); // if we're not passed explicit zoom data use the model\n        var zoomBarNormalizedValues = sanitizedData;\n        var cartesianScales = this.services.cartesianScales;\n        if (sanitizedData &&\n            cartesianScales.domainAxisPosition &&\n            cartesianScales.rangeAxisPosition) {\n            var domainIdentifier_1 = cartesianScales.getDomainIdentifier();\n            var rangeIdentifier_1 = cartesianScales.getRangeIdentifier();\n            // get all dates (Number) in displayData\n            var allDates = sanitizedData.map(function (datum) {\n                return datum[domainIdentifier_1].getTime();\n            });\n            allDates = Tools.removeArrayDuplicates(allDates).sort();\n            // Go through all date values\n            // And get corresponding data from each dataset\n            zoomBarNormalizedValues = allDates.map(function (date) {\n                var sum = 0;\n                var datum = {};\n                sanitizedData.forEach(function (data) {\n                    if (data[domainIdentifier_1].getTime() === date) {\n                        sum += data[rangeIdentifier_1];\n                    }\n                });\n                datum[domainIdentifier_1] = new Date(date);\n                datum[rangeIdentifier_1] = sum;\n                return datum;\n            });\n        }\n        this.set({ zoomBarData: zoomBarNormalizedValues });\n    };\n    ChartModelCartesian.prototype.getZoomBarData = function () {\n        return this.get('zoomBarData');\n    };\n    ChartModelCartesian.prototype.sanitizeDateValues = function (data) {\n        var options = this.getOptions();\n        if (!options.axes) {\n            return data;\n        }\n        var keysToCheck = [];\n        Object.keys(AxisPositions).forEach(function (axisPositionKey) {\n            var axisPosition = AxisPositions[axisPositionKey];\n            var axisOptions = options.axes[axisPosition];\n            if (axisOptions && axisOptions.scaleType === ScaleTypes.TIME) {\n                var axisMapsTo = axisOptions.mapsTo;\n                if (axisMapsTo !== null || axisMapsTo !== undefined) {\n                    keysToCheck.push(axisMapsTo);\n                }\n            }\n        });\n        if (keysToCheck.length > 0) {\n            // Check all datapoints and sanitize dates\n            data.forEach(function (datum) {\n                keysToCheck.forEach(function (key) {\n                    if (Tools.getProperty(datum, key, 'getTime') === null) {\n                        datum[key] = new Date(datum[key]);\n                    }\n                });\n            });\n        }\n        return data;\n    };\n    ChartModelCartesian.prototype.sanitize = function (data) {\n        data = _super.prototype.sanitize.call(this, data);\n        data = this.sanitizeDateValues(data);\n        return data;\n    };\n    return ChartModelCartesian;\n}(ChartModel));\nexport { ChartModelCartesian };\n//# sourceMappingURL=../src/model-cartesian-charts.js.map"]},"metadata":{},"sourceType":"module"}