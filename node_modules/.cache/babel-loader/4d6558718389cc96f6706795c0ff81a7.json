{"ast":null,"code":"import _objectSpread from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/zander/Documents/Development/ActionsLogging/Dashboard/src/components/PercentRing/PercentRing.js\";\nimport React from 'react';\nimport './percent-ring.scss';\nimport { connect } from 'react-redux';\nimport { getLayeredDictCount, mergePromptCountsByDate } from \"../../utils\";\n\nvar PercentRing = /*#__PURE__*/function (_React$Component) {\n  _inherits(PercentRing, _React$Component);\n\n  var _super = _createSuper(PercentRing);\n\n  function PercentRing(props) {\n    var _this;\n\n    _classCallCheck(this, PercentRing);\n\n    _this = _super.call(this, props);\n    _this.width = 275;\n    _this.stroke = 16;\n    _this.circumference = (_this.width / 2 - 2 * _this.stroke) * 2 * Math.PI;\n    return _this;\n  }\n\n  _createClass(PercentRing, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rings-wrapper\",\n        style: {\n          opacity: this.props.statsLoaded ? 1 : 0.1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(\"svg\", {\n        className: \"progress-ring\",\n        width: this.width,\n        height: this.width,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"circle\", {\n        className: \"progress-ring__circle\",\n        stroke: \"#e98588\",\n        strokeWidth: this.stroke,\n        fill: \"transparent\",\n        r: this.width / 2 - 2 * this.stroke,\n        cx: this.width / 2,\n        cy: this.width / 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"svg\", {\n        style: {\n          strokeDasharray: \"\".concat(this.circumference, \" \").concat(this.circumference),\n          strokeDashoffset: this.circumference - this.props.percent / 100 * this.circumference,\n          transform: \"rotate(-90deg)\"\n        },\n        className: \"progress-ring\",\n        width: this.width,\n        height: this.width,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"circle\", {\n        className: \"progress-ring__circle\",\n        stroke: \"#333333\",\n        strokeWidth: this.stroke,\n        fill: \"transparent\",\n        r: this.width / 2 - 2 * this.stroke,\n        cx: this.width / 2,\n        cy: this.width / 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"percent-div\",\n        style: {\n          marginTop: this.width / 2,\n          marginLeft: this.width / 2\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"percent-num\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }\n      }, this.props.percent), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"percent-sign\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 64\n        }\n      }, \"%\")));\n    }\n  }]);\n\n  return PercentRing;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownState) {\n  var props = _objectSpread(_objectSpread({}, ownState), {}, {\n    percent: 0,\n    statsLoaded: state.statsLoaded\n  });\n\n  if (props.type == \"recognized\" && state.statsLoaded) {\n    // Recognized % = recognized / (recognized + not-recognized)\n    var counts = getLayeredDictCount(state.recognized, state.startDate, state.endDate);\n    props.percent = Math.round(100 * (counts.recognized / (counts.recognized + counts.notRecognized)));\n  } else if (props.type == \"promptsuccess\") {\n    // Prompt Success % = success / (success + fails)\n    var promptCounts = getLayeredDictCount(mergePromptCountsByDate(state.promptStatus), state.startDate, state.endDate);\n    props.percent = Math.round(100 * (promptCounts.success / (promptCounts.success + promptCounts.fail)));\n  } // If loading percent fails, show 0 instead of NAN\n\n\n  if (isNaN(props.percent) || !props.statsLoaded) props.percent = 0;\n  return props;\n};\n\nexport default connect(mapStateToProps)(PercentRing);","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/src/components/PercentRing/PercentRing.js"],"names":["React","connect","getLayeredDictCount","mergePromptCountsByDate","PercentRing","props","width","stroke","circumference","Math","PI","opacity","statsLoaded","strokeDasharray","strokeDashoffset","percent","transform","marginTop","marginLeft","Component","mapStateToProps","state","ownState","type","counts","recognized","startDate","endDate","round","notRecognized","promptCounts","promptStatus","success","fail","isNaN"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './percent-ring.scss';\nimport { connect } from 'react-redux';\nimport { getLayeredDictCount, mergePromptCountsByDate } from \"../../utils\"\n\n\nclass PercentRing extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.width = 275\n        this.stroke = 16\n        this.circumference = (this.width / 2 - 2 * this.stroke) * 2 * Math.PI\n    }\n\n    render () {\n        return <div className=\"rings-wrapper\" style={{ opacity: this.props.statsLoaded ? 1: 0.1}}>\n          <svg\n            className=\"progress-ring\"\n            width={ this.width }\n            height={ this.width }>\n            <circle\n              className=\"progress-ring__circle\"\n              stroke=\"#e98588\"\n              strokeWidth={ this.stroke }\n              fill=\"transparent\"\n              r={ this.width / 2 - 2 * this.stroke }\n              cx={ this.width / 2 }\n              cy={ this.width / 2 } />\n          </svg>\n          <svg\n            style={{ \n              strokeDasharray: `${this.circumference} ${this.circumference}`,\n              strokeDashoffset: this.circumference - (this.props.percent / 100) * this.circumference,\n              transform: \"rotate(-90deg)\" }}\n            className=\"progress-ring\"\n            width={ this.width }\n            height={ this.width }>\n            <circle\n              className=\"progress-ring__circle\"\n              stroke=\"#333333\"\n              strokeWidth={ this.stroke }\n              fill=\"transparent\"\n              r={ this.width / 2 - 2 * this.stroke }\n              cx={ this.width / 2 }\n              cy={ this.width / 2 } />\n          </svg>\n          <div className=\"percent-div\" style={{ marginTop: this.width / 2, marginLeft: this.width / 2 }}>\n            <p className=\"percent-num\">{this.props.percent}</p><p className=\"percent-sign\">%</p>\n          </div>\n     </div>\n\n    }\n}\n\nconst mapStateToProps = (state, ownState) => {\n  let props = {\n      ...ownState,\n      percent: 0,\n      statsLoaded: state.statsLoaded\n  }\n\n  if (props.type == \"recognized\" && state.statsLoaded) {\n    // Recognized % = recognized / (recognized + not-recognized)\n    let counts = getLayeredDictCount(state.recognized, state.startDate, state.endDate)\n    props.percent = Math.round(100 * (counts.recognized / (counts.recognized + counts.notRecognized)))\n  } else if (props.type == \"promptsuccess\") {\n      // Prompt Success % = success / (success + fails)\n    let promptCounts = getLayeredDictCount(mergePromptCountsByDate(state.promptStatus), state.startDate, state.endDate)\n    props.percent = Math.round(100 * (promptCounts.success / (promptCounts.success  + promptCounts.fail)))\n  }\n\n  // If loading percent fails, show 0 instead of NAN\n  if (isNaN(props.percent) || !props.statsLoaded)\n    props.percent = 0\n\n  return props\n}\n\nexport default connect(mapStateToProps)(PercentRing)"]},"metadata":{},"sourceType":"module"}