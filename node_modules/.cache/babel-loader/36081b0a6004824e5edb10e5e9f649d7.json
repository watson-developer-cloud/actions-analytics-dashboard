{"ast":null,"code":"import { format } from 'date-fns';\nimport { Tools } from '../tools'; // D3 Imports\n\nimport { min } from 'd3-array';\nexport var TIME_INTERVALS = [['15seconds', 15 * 1000], ['minute', 60 * 1000], ['30minutes', 30 * 60 * 1000], ['hourly', 60 * 60 * 1000], ['daily', 24 * 60 * 60 * 1000], ['monthly', 30 * 24 * 60 * 60 * 1000], ['quarterly', 3 * 30 * 24 * 60 * 60 * 1000], ['yearly', 12 * 30 * 24 * 60 * 60 * 1000]]; // Return true if the tick is a primary tick, false otherwise\n\nexport function isTickPrimary(tick, i, allTicks, interval, showDayName) {\n  var isFirstTick = i === 0;\n  var hasANewWeekStarted = Number(format(new Date(tick), 'c')) === 2;\n  var isFirstQuarter = Number(format(new Date(tick), 'q')) === 1;\n  var previousTick = i !== 0 ? allTicks[i - 1] : null;\n\n  switch (interval) {\n    case '15seconds':\n      return isFirstTick || isDayOfMonthChanged(tick) || isMonthChanged(tick, previousTick) || isYearChanged(tick);\n\n    case 'minute':\n      return isFirstTick || isDayOfMonthChanged(tick) || isMonthChanged(tick, previousTick) || isYearChanged(tick);\n\n    case '30minutes':\n      return isFirstTick || isDayOfMonthChanged(tick) || isMonthChanged(tick, previousTick) || isYearChanged(tick);\n\n    case 'hourly':\n      return isFirstTick || isDayOfMonthChanged(tick) || isMonthChanged(tick, previousTick) || isYearChanged(tick);\n\n    case 'daily':\n      if (!showDayName) {\n        // daily\n        return isFirstTick || isMonthChanged(tick, previousTick) || isYearChanged(tick);\n      } else {\n        // weekly\n        return isFirstTick || hasANewWeekStarted || isYearChanged(tick);\n      }\n\n    case 'monthly':\n      return isFirstTick || isYearChanged(tick);\n\n    case 'quarterly':\n      return isFirstTick || isFirstQuarter;\n\n    case 'yearly':\n      return false;\n\n    default:\n      throw new Error(interval + \" is not a valid time interval.\");\n  }\n} // Return the formatted current tick\n\nexport function formatTick(tick, i, allTicks, interval, timeScaleOptions) {\n  var showDayName = timeScaleOptions.showDayName;\n  var intervalConsideringAlsoShowDayNameOption = interval === 'daily' && showDayName ? 'weekly' : interval;\n  var date = new Date(tick);\n  var formats = Tools.getProperty(timeScaleOptions, 'timeIntervalFormats')[intervalConsideringAlsoShowDayNameOption];\n  var primary = Tools.getProperty(formats, 'primary');\n  var secondary = Tools.getProperty(formats, 'secondary');\n  var formatString = isTickPrimary(tick, i, allTicks, interval, showDayName) ? primary : secondary;\n  var locale = timeScaleOptions.localeObject;\n  return format(date, formatString, {\n    locale: locale\n  });\n} // Given a timestamp, return an object of useful time formats\n// Use Unicode date field symbol (https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table)\n\nexport function getTimeformats(timestamp) {\n  var date = new Date(timestamp);\n  return {\n    M: date.getMonth() + 1,\n    d: date.getDate(),\n    H: date.getHours(),\n    m: date.getMinutes(),\n    s: date.getSeconds()\n  };\n} // Find the differences between consecutive numbers in an array\n\nfunction getConsecutiveDifferences(elements) {\n  if (!elements) {\n    return;\n  }\n\n  return elements.slice(1).map(function (elem, i) {\n    return elem - elements[i];\n  });\n} // Given a duration in ms, return the closest TIME_INTERVAL name\n\n\nfunction closestTimeIntervalName(duration) {\n  var index = TIME_INTERVALS.reduce(function (nearestIndex, _a, i) {\n    var intervalName = _a[0],\n        delta = _a[1];\n    var deltaNearest = TIME_INTERVALS[nearestIndex][1];\n    var oldNearestSpan = Math.abs(deltaNearest - duration);\n    var currentSpan = Math.abs(delta - duration);\n    return oldNearestSpan < currentSpan ? nearestIndex : i;\n  }, 0);\n  return TIME_INTERVALS[index][0];\n} // Given an array of timestamps, return the interval name\n// between 15seconds, minute, 30minutes, hourly, daily, weekly, monthly, quarterly, yearly\n\n\nexport function computeTimeIntervalName(ticks) {\n  // special case: if the dataset has only one datum, we show the tick in the most detailed way possible\n  if (ticks.length === 1) {\n    return '15seconds';\n  }\n\n  var differences = getConsecutiveDifferences(ticks);\n  var minDifference = min(differences);\n  return closestTimeIntervalName(minDifference);\n} // Return true if the day of the month (D = 1-31) is changed, false otherwise\n\nfunction isDayOfMonthChanged(timestamp) {\n  var _a = getTimeformats(timestamp),\n      s = _a.s,\n      m = _a.m,\n      H = _a.H;\n\n  return H === 0 && m === 0 && s === 0;\n} // Return true if the month (M = 1-12) is changed from previous tick's timestamp, false otherwise\n\n\nfunction isMonthChanged(timestamp, previousTimestamp) {\n  var currentMonth = getTimeformats(timestamp).M;\n  var previousMonth = getTimeformats(previousTimestamp).M;\n  return currentMonth !== previousMonth;\n} // Return true if the year (YYYY) is changed, false otherwise\n\n\nfunction isYearChanged(timestamp) {\n  var _a = getTimeformats(timestamp),\n      M = _a.M,\n      d = _a.d,\n      s = _a.s,\n      m = _a.m,\n      H = _a.H;\n\n  return M === 1 && d === 1 && H === 0 && m === 0 && s === 0;\n}","map":{"version":3,"sources":["/Users/zander/Documents/Development/ActionsLogging/Dashboard/node_modules/@carbon/charts/services/time-series.js"],"names":["format","Tools","min","TIME_INTERVALS","isTickPrimary","tick","i","allTicks","interval","showDayName","isFirstTick","hasANewWeekStarted","Number","Date","isFirstQuarter","previousTick","isDayOfMonthChanged","isMonthChanged","isYearChanged","Error","formatTick","timeScaleOptions","intervalConsideringAlsoShowDayNameOption","date","formats","getProperty","primary","secondary","formatString","locale","localeObject","getTimeformats","timestamp","M","getMonth","d","getDate","H","getHours","m","getMinutes","s","getSeconds","getConsecutiveDifferences","elements","slice","map","elem","closestTimeIntervalName","duration","index","reduce","nearestIndex","_a","intervalName","delta","deltaNearest","oldNearestSpan","Math","abs","currentSpan","computeTimeIntervalName","ticks","length","differences","minDifference","previousTimestamp","currentMonth","previousMonth"],"mappings":"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","sourcesContent":["import { format } from 'date-fns';\nimport { Tools } from '../tools';\n// D3 Imports\nimport { min } from 'd3-array';\nexport var TIME_INTERVALS = [\n    ['15seconds', 15 * 1000],\n    ['minute', 60 * 1000],\n    ['30minutes', 30 * 60 * 1000],\n    ['hourly', 60 * 60 * 1000],\n    ['daily', 24 * 60 * 60 * 1000],\n    ['monthly', 30 * 24 * 60 * 60 * 1000],\n    ['quarterly', 3 * 30 * 24 * 60 * 60 * 1000],\n    ['yearly', 12 * 30 * 24 * 60 * 60 * 1000],\n];\n// Return true if the tick is a primary tick, false otherwise\nexport function isTickPrimary(tick, i, allTicks, interval, showDayName) {\n    var isFirstTick = i === 0;\n    var hasANewWeekStarted = Number(format(new Date(tick), 'c')) === 2;\n    var isFirstQuarter = Number(format(new Date(tick), 'q')) === 1;\n    var previousTick = i !== 0 ? allTicks[i - 1] : null;\n    switch (interval) {\n        case '15seconds':\n            return (isFirstTick ||\n                isDayOfMonthChanged(tick) ||\n                isMonthChanged(tick, previousTick) ||\n                isYearChanged(tick));\n        case 'minute':\n            return (isFirstTick ||\n                isDayOfMonthChanged(tick) ||\n                isMonthChanged(tick, previousTick) ||\n                isYearChanged(tick));\n        case '30minutes':\n            return (isFirstTick ||\n                isDayOfMonthChanged(tick) ||\n                isMonthChanged(tick, previousTick) ||\n                isYearChanged(tick));\n        case 'hourly':\n            return (isFirstTick ||\n                isDayOfMonthChanged(tick) ||\n                isMonthChanged(tick, previousTick) ||\n                isYearChanged(tick));\n        case 'daily':\n            if (!showDayName) {\n                // daily\n                return (isFirstTick ||\n                    isMonthChanged(tick, previousTick) ||\n                    isYearChanged(tick));\n            }\n            else {\n                // weekly\n                return isFirstTick || hasANewWeekStarted || isYearChanged(tick);\n            }\n        case 'monthly':\n            return isFirstTick || isYearChanged(tick);\n        case 'quarterly':\n            return isFirstTick || isFirstQuarter;\n        case 'yearly':\n            return false;\n        default:\n            throw new Error(interval + \" is not a valid time interval.\");\n    }\n}\n// Return the formatted current tick\nexport function formatTick(tick, i, allTicks, interval, timeScaleOptions) {\n    var showDayName = timeScaleOptions.showDayName;\n    var intervalConsideringAlsoShowDayNameOption = interval === 'daily' && showDayName ? 'weekly' : interval;\n    var date = new Date(tick);\n    var formats = Tools.getProperty(timeScaleOptions, 'timeIntervalFormats')[intervalConsideringAlsoShowDayNameOption];\n    var primary = Tools.getProperty(formats, 'primary');\n    var secondary = Tools.getProperty(formats, 'secondary');\n    var formatString = isTickPrimary(tick, i, allTicks, interval, showDayName)\n        ? primary\n        : secondary;\n    var locale = timeScaleOptions.localeObject;\n    return format(date, formatString, { locale: locale });\n}\n// Given a timestamp, return an object of useful time formats\n// Use Unicode date field symbol (https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table)\nexport function getTimeformats(timestamp) {\n    var date = new Date(timestamp);\n    return {\n        M: date.getMonth() + 1,\n        d: date.getDate(),\n        H: date.getHours(),\n        m: date.getMinutes(),\n        s: date.getSeconds(),\n    };\n}\n// Find the differences between consecutive numbers in an array\nfunction getConsecutiveDifferences(elements) {\n    if (!elements) {\n        return;\n    }\n    return elements.slice(1).map(function (elem, i) { return elem - elements[i]; });\n}\n// Given a duration in ms, return the closest TIME_INTERVAL name\nfunction closestTimeIntervalName(duration) {\n    var index = TIME_INTERVALS.reduce(function (nearestIndex, _a, i) {\n        var intervalName = _a[0], delta = _a[1];\n        var deltaNearest = TIME_INTERVALS[nearestIndex][1];\n        var oldNearestSpan = Math.abs(deltaNearest - duration);\n        var currentSpan = Math.abs(delta - duration);\n        return oldNearestSpan < currentSpan ? nearestIndex : i;\n    }, 0);\n    return TIME_INTERVALS[index][0];\n}\n// Given an array of timestamps, return the interval name\n// between 15seconds, minute, 30minutes, hourly, daily, weekly, monthly, quarterly, yearly\nexport function computeTimeIntervalName(ticks) {\n    // special case: if the dataset has only one datum, we show the tick in the most detailed way possible\n    if (ticks.length === 1) {\n        return '15seconds';\n    }\n    var differences = getConsecutiveDifferences(ticks);\n    var minDifference = min(differences);\n    return closestTimeIntervalName(minDifference);\n}\n// Return true if the day of the month (D = 1-31) is changed, false otherwise\nfunction isDayOfMonthChanged(timestamp) {\n    var _a = getTimeformats(timestamp), s = _a.s, m = _a.m, H = _a.H;\n    return H === 0 && m === 0 && s === 0;\n}\n// Return true if the month (M = 1-12) is changed from previous tick's timestamp, false otherwise\nfunction isMonthChanged(timestamp, previousTimestamp) {\n    var currentMonth = getTimeformats(timestamp).M;\n    var previousMonth = getTimeformats(previousTimestamp).M;\n    return currentMonth !== previousMonth;\n}\n// Return true if the year (YYYY) is changed, false otherwise\nfunction isYearChanged(timestamp) {\n    var _a = getTimeformats(timestamp), M = _a.M, d = _a.d, s = _a.s, m = _a.m, H = _a.H;\n    return M === 1 && d === 1 && H === 0 && m === 0 && s === 0;\n}\n//# sourceMappingURL=../../src/services/time-series.js.map"]},"metadata":{},"sourceType":"module"}